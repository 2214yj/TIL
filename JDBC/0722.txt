# 0722

* 회원관리 프로그램 실습
- 기능1. 새로운 회원 등록

- 기능2. 기존 회원을 검색

- 데이터베이스

<파일 구성도>
Main.java -> main method. 서비스 없이 main에서 로직 처리를 할 예정
UserDAO.java -> 데이터베이스에 접근하는 객체를 처리하는 클래스.
User.java -> 데이터가 왔다갔다 하는 것을 객체화 시켜서 사용하기 위한 클래스, 이게 DTO, VO, Entity, Bean


* Java 기본 개념
- language spec
- class, instance(객체 지향 개념)
- class library (~)
- Database -> JDBC


* class를 작성(설계)할 때
항상 재사용성과 유지보수성에 맞춰서 작성해야 한다.
객체 지향 언어를 사용하는 가장 큰 이유는 재사용성과 유지보수성
어떤 변화가 있을 때 코드를 빠르고 쉽고 안정적으로 변화시킬 수 있어야 한다.
코드의 수정이 다른 부분에 영향을 주는 것을 최소화 시켜야 한다!
SoC(Seperation of Concern, 관심사의 분리)

재사용성이 있는 class 인가? 네이버와 카카오에 dao를 판매한다고 가정해보자.
네이버와 카카오는 나름대로의 dbms connection 연결 방식을 사용한다.
이런 경우, 어떻게 해야 할까?

추상 메서드로 만들면 카카오와 네이버가 상속 후 오버라이딩해서 사용 가능하다.
=> 실습으로 구현한 코드에서 상위 클래스에 기본적인 로직 흐름을 구현, 이 안에 protected method, abstract method가 있다.
    하위 클래스가 상위 클래스의 추상 메서드를 오버라이딩해서 하위 클래스에 맞도록 기능을 완성
    이게 바로 디자인 패턴 중 "Template Method Pattern"이다. 이 방식이 클래스를 상속해서 확장하는 가장 기본적인 방식이다.
    변경되지 않는 기능은 상위 클래스에서, 변경되어야 하는 기능은 하위 클래스에서 구현.



* 조금 다른 관점에서 살펴보면
userDAO에는 getConnection이라는 추상 메서드가 존재한다. 하위 클래스에서는 구체적으로 객체를 어떻게 생성할 것인지를 기술하고 있다.
=> 디자인 패턴 중 "Factory Method Pattern"이다.



* 객체를 재사용한다는 측면에거 좋은데, 객체를 재사용하기 위해서 Inheritance(상속)를 사용했다는 문제가 있다.
Inheritance(상속)은 양날의 검이다. 상속은 결합도가 높다. 상속은 단일 상속만 제공하기 때문에 제한이 있다.
그렇다면 상속을 사용하지 않고 이와 같은 효과를 내려면 어떻게 해야 할까?
=> 인터페이스를 이용하자! 인터페이스는 다른 클래스에 종속되지 않는다.

