# 0721

** JDBC(Java Database Connectivity)

자바 프로그램과 연결하기 한 각 데이터베이스 벤더에 따른 연결 방법이 다르다. (connect(), start(), open())
따라서 유지보수 및 재사용성에 문제 발생 가능.
공통된 인터페이스를 만들어서 이러한 문제를 해결해 보자!

=> 그래서 등장한 것이 JDBC
각각의 데이터베이스 벤더들이 자바로 만들어진 드라이버를 제공해준다.


* JDBC 연결
1. 사용하려는 데이터베이스에 맞는 JDBC Driver CLass를 등록해야 한다.
    < JDB Driver 로딩하는 방법 >
    1. class라는 클래스를 사용한다.
    2. Driver Manager class를 사용한다.

2. DBMS와 연결 (실제로 데이터베이스 연결)
JDBC url과 id, pw를 사용하여 connection 인스턴스 생성 가능
만약 성공하면 connection 인스턴스가 생성된다. => 부하가 많이 걸린다.
클라이언트를 받아들일 수 있는 세션의 개수가 제한되어 있다.
따라서 자원 관리를 잘 해줘야 한다. 다 사용 후 반드시 사용한 자원을 해제해서 데이터베이스의 세션이 종료될 수 있도록 처리해야 한다.

3. statement 생성
    1. 일반 Statement
    2. prepared Statement (개량형)
    3. callable Statement (stored procedure를 호출할 때 사용)

4. query 실행
쿼리를 실행하기 위해 Statement의 메서드를 이용한다.
사용하는 SQL 문 종류에 따라 구분되는 3개의 메서드.
    1. execute() : 모두 다 가능. 대신에 나온 결과에 대한 처리 로직을 구현해야 함.
    2. executeQuery() : select문을 실행할 때 사용.
    3. executeUpdate() : insert, update, delete문을 실행할 때 사용.

5. 결과 쿼리 (Result Set)
ResultSet rs = pstmt.executeQuery();
rs는 포인터이다. 실제 데이터베이스에서 쿼리가 실행되고 실행 결과 레코드 집합을 rs가 가리키고 있다. rs.next()를 실행하면 다음 행으로 이동한다. (rs.next()가 true이면 다음행을 내려갈 수 있고 false이면 내려갈 수 없다)
데이터베이스의 데이터 타입을 자바 타입으로 바꿔야 한다. 인자로 순서나 column명 전달 가능 ( ex) rs.getInt(2), rs.getString("column명") ... )



* Connection Pool
미리 만들어서 Pool에 넣어뒀다가 사용과 재사용을 원활하게 한다.
동시에 많은 사용자에 대해 데이터베이스 처리를 제공하려면?
    하나의 커넥션을 여럿이서 공유할 경우, 동기화 문제가 발생 가능. 트랜잭션 문제 때문에 안된다.

pooling 기법을 사용하자. 자주 사용되는 객체들을 여러개 만들어서 pool에 넣어두고 빌려주고 반납받는다. 이렇게 해서 객체의 생성/소멸에 대한 리소스 낭비를 줄이자.
pooling 기법의 이점
    1. 속도 향상
    2. 자원에 대한 효율성을 높일 수 있다.
    3. connection 수를 제어할 수 있다.
=> connection pool을 기본으로 사용된다!

그렇다면 connection Pool을 어떻게 사용하는가?
이미 만들어져 있는 connection pool을 가져다 사용.(유료 버전, 무료 버전 둘 다 존재)
대표적인 무료 버전으로는 Apache connections의 DBCP이다.



* Layered Architecture
        Presentation Layer(입출력에 관련된 계층)
    --------------------------------
        Business(Logic) Layer (연산, 조작 처리)
    --------------------------------
        Persistence Layer
    --------------------------------
        Database Layer


<프로젝트 아키텍쳐 예시>
simplebooksearch         => SimpleBookSearch class (JavaFX)
                            View
simplebooksearch.service => BookService class (service 역할)
                            조회, 삭제 (하나의 transaction)
simplebooksearch.vo      => BookVO class (VO, DTO 역할)
simplebooksearch.dao     => BookDAO class (데이터베이스 처리)
