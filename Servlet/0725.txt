# 0725

** Servlet
- Internet: network of Network -> "Infrastructure"
- TCP/IP (TCP, IP)
데이터 전송은 패킷 단위로 이루어 진다.

IP 프로토콜 자체가 비신뢰적이기 때문에 신뢰성 보장을 위해 TCP(Transmission Control Protocol) 프로토콜을 사용한다.
IP Address는 4바이트 숫자로 이루어져있기 때문에 사용하기 어렵다. 따라서 IP주소 대신 도메인 네임을 이용한다. 도메인 네임 서버(DNS)는 IP 주소와 도메인 네임을 매칭해준다.

Port는 프로세스에 할당된 번호이다.
NIC까지는 찾을 수 있지만 해당 컴퓨터의 프로세스들 중 하나의 프로세스를 찾기 위한 논리적인 번호이다.

* Hypertext
연결가능한 정보의 집합 체계, 사용자의 선택에 따라 관련된 정보 쪽으로 이동할 수 있는 조직화된 정보 = Hypertext
=> www의 발명,발전의 계기

* HTTP
인터넷 상에서 데이터 교환을 위해 사용하는 프로토콜. client-server 구조이다.
Server Process는 웹 서버이다. 웹서버의 포트 번호는 80번이다.

* static web
웹 환경에서 웹 서버가 웹 클라이언트(브라우저)가 요청하는 데이터를 어떠한 로직 처리 없이 찾아다가 전해준다.
=> 여기에 동적인 처리(프로그램)을 가미한 것이 dynamic web. Server Side 쪽에 프로그램이 들어간다.
    Servlet -> 동적으로 HTML Page를 생성. 그러나 자바와 HTML이 섞여 있기 때문에 생산성이 떨어진다.
=> 생산성을 높이기 위해 JSP 등장. 구현은 쉽지만 유지보수가 어렵다.
=> Servlet으로 돌아가는 대신 MVC 패턴을 사용하자!
=> MVC 구조에 따른 규격들을 따르기 위해서 프레임워크를 사용.

* HTTP Client-Server 구조
웹 클라이언트는 일반적으로 브라우저이다.

* dynamic web project
- 프로젝트 이름: eclipse에서 project를 식별하기 위한 이름.
- context root: 우리 프로젝트가 클라이언트에 의해 지칭되는 이름.(우리 프로젝트의 웹 상에서 사용되는 논리적인 이름) 일반적으로 간소화된 이름으로 context root를 따로 잡는다.

프로젝트를 생성하고 코드를 구현. 웹서버에게 우리 프로젝트의 존재를 알려줘야 한다. => "configure"
web server를 통해서 우리 프로젝트를 웹에 "deploy"

HTML(태그, 속성) -> 사용자 입력 양식, 클라이언트가 서버에 데이터를 전달할 목적으로 사용.

* Request Method
- Get -> Query String 이용. 간단하게 처리 가능하다는 장점이 있지만 보내려는 데이터가 URL을 통해 노출된다는 단점이 있다. 또한 대량의 데이터를 전송할 수 없다.
    1. 브라우저 주소창에 URL 입력하고 엔터
    2. hypertext(링크)를 이용해서 request
    3. form 태그를 이용하는 데 form의 메서드가 get인 경우
- Post -> Query String을 쓰지 말고 request header에 데이터를 포함. URL에 데이터가 노출되지 않지만 그렇다고 보안성이 있다고 할 수는 없다. 왜? snipping 가능하기 때문에. 패킷 암호화/복호화 처리가 필요하다.
    1. form tag를 이용 -> method가 post인 경우 이 form을 이용해서 request

* Dynamic Web (servlet)
클라이언트가 동적으로 해당 프로그램(서버)을 호출해서 필요한 데이터를 전달받는다.
URL Mapping: client가 우리 servlet을 식별할 때 사용하는 이름.


* Servlet을 어떻게 동작하나요?!
1. Layered Architecture이 적용 필요!
-> MVC pattern

2. Servlet의 데이터 공유

3. 출력 문제 -> Java code 내에서 HTML을 포함시켜야 해요!!! JSP 또는 front-end 자체 처리

4. HTTP protocol은 Stateless protocol


* Servlet Context
모든 servlet이 공유하는 객체. 공유해야하는 것이 있을 때 이용하면 된다.

* HTTP protocol은 무상태 protocol(stateless)
=> session 처리를 통해서 이 문제를 해결하자.

