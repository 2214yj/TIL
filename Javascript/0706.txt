# 0706

<지난 시간 복습>

** 객체
* Javascript 객체를 생성할 수 있는 방법
1. 객체 literal
2. Object 생성자 함수
3. 사용자 정의(user defined) 생성자 함수
4. Object create 메소드
5. es6에서 제공이 되는 class

만드는 방법에 따라 객체 구조가 달라진다.
* 객체를 사용하는 방법
    1. dot(.) notation
    2. bracket([]) notation

만약 property key가 자바스크립트의 identifier naming rule을 따른다면 리터럴로 객체를 만들 때 "", '' 마크를 생략해도 괜찮다.

property 잘 알려진, general한 단어를 키로 쓴다면 오류 발생 확률이 높다.
모든 함수는 함수의 식별자를 가지고 콜하기 때문에 property value로는 주로 익명함수를 사용한다.
property의 value에 function이 오는 것을 통상적으로 메서드라고 하지만 사실 자바스크립트(ES6)의 진정한 메서드는 축약해서 표현하는 것!
=> ex) 통상적인 메서드
     getName: function(){
         ...
     }
   ex) 진짜 메서드
     getName(){
         ...
     }

리터럴에서는 2개의 축약 표현이 가능하다! (앞서 설명한 메서드, 위의 변수를 가져와서 property 만들기 ex) var obj = {age,name} )

객체를 mutable로 잡은 이유는 메모리 효율성을 위해서! 시스템적인 부하를 줄이기 위해서!



** 함수(function)
함수는 객체.

parameter(함수 내에서 선언한 지역 변수, formal parameter)
argument(실인자, 인수, actual parameter)
return value

1. function literal, 함수 표현식
literal은 엔진에 의해 평가되어서 하나의 값으로 떨어지는 것!
ex) var myAdd = function add(x,y){
                    ...
                }

2. 함수 선언문
코드 문맥을 읽으면서 function literal인지, 함수를 선언하는 것인지 판단하며 함수 선언문일 경우 묵시적으로 함수 이름과 똑같은 식별자를 만들어서 함수 객체를 만들어 냄.
호이스팅은 둘 다 되지만 함수 표현식은 execution phase에 만들어진다. 함수 선언문은 creation phase에 만들어진다.
creation phase:
execution phase:
ex) function add(x,y){ return x+y; }

3. Function 빌트인 생성자 함수
var myFunc = new Function('x','y','return x+y')
문자열로 집어넣는 것이 불편해서 잘 사용 안한다.

4. arrow function(ES6)
똑같이 함수 객체를 만들어냄.
ex) var add = (x,y) => x+y;


* function 호출
함수 내부의 arguments 유사배열 객체.
유사배열 객체는 배열처럼 쓸 수 있지만 배열보다는 불편함. 유사배열 객체는 literable만 가능하고 다른 기능은 제공하지 않는다.

IIFE(즉시실행함수): 함수를 선언하면서 동시에 호출. 전역변수의 사용을 지양하기 위해서 사용.

* 중첩함수: 함수 내에 함수를 만들어 사용할 수 있다.

* callback 함수: 콜백 함수를 가져다가 사용하는 것이 고차 함수(Higher-Ordered Function)이다. 이벤트 처리, ajax 처리할 때 콜백함수를 사용.
콜백함수 사용이 가능한 이유는 함수가 일급객체이기 때문이다. 일급객체이기 때문에 다른 함수의 인자로 전달될 수 있다.

* scope: 식별자의 유효 범위
scope chain이 만들어져서 식별자를 인지할 때 체인을 따라가면서 해당 식별자를 찾게 된다.
스코프는 정적 스코프와 동적 스코프가 있다.
동적 스코프(dynamic scope): 사용된 위치에 따라 스코프가 잡힌다.
정적 스코프(static scope, lexical scope): 스코프가 선언한 위치에 따라 잡힌다. 자바스크립트를 포함한 대부분의 언어들은 lexical scope를 따른다.

* property attribute
자바스크립트는 사용자가 접근할 수 없는 내부슬롯과 내부 메소드가 있다. 엔진에 의해 사용되는 것이지 직접적인 접근이 불가하다.
내부 슬롯과 내부 메소드는 [[...]]으로 표현된다.
- value: 실제 값이 저장됨.
- writable: 변경할 수 있는지 여부
- enumerable:열거할 수 있는지 여부
- cofigurable:재할당 할 수 있는지 여부
직접 접근은 불가하디만 defineProperty 메소드를 통해 property attribute를 지정 가능하다.

자바스크립트 객체는 property를 (property 추가, property 삭제, property 값의 read, property 값의 write)할 수 있기 때문에 자유롭게 사용 가능!



<여기부터 새로운 내용>

1. 확장 금지(Object.preventExtensions() => 객체의 property 추가가 안됨.)
2. 밀봉(Object.seal() => 객체의 property를 추가하거나 삭제할 수 없음)
3. 동결(Object.freeze() => property의 추가, 삭제, property 값의 변경이 안됨.)

'use strict';
=> 자바스크립트의 유연성 때문에 오류를 처리하기가 어려움. strict 모드로 잡아주면 해당 스코프 내에서는 엄격하게 오류 처리를 해줌.
부분적으로 스코프를 지정하여 적절하게 사용하는 것이 좋다.

* 생성자 함수에 의한 객체 생성
1. Object 생성자 함수를 이용한 객체 생성
new keyword를 이용해서 생성자 함수 호출. instance를 만든다. 빈 객체를 만들어 낸다.
ex) const person = new Object();

built in 대표적인 생성자 함수:
- Object()
- String()
- Number()
- Boolean()
- Function()
- Array()
- ... 약 40개 정도 있음.
일반 함수와 생성자 함수의 눈에 띄는 차이가 없다. => 그래서 생성자 함수로 만들 때는 함수의 첫글자를 대문자로 사용하도록 약속!

2. (User defined) 생성자 함수
생성자 함수는 new keyword로 호출, 인스턴스를 생성.

this
this라는 키워드는 생성자 함수일 경우도 있고 일반 함수인 경우에도 있다! (둘의 경우에서 this가 가리키는 의미가 다름)
    생성자 함수에서의 this => 앞으로 만들어질 인스턴스를 가리키는 reference.
    일반 함수에서의 this => window(함수를 호출한 객체를 가리킴)
    메서드에서의 this => 현재 사용하는 객체
ex) //생성자 함수와 일반 함수에서 this를 찍어보기
    function Person(){
        console.log(this)
    }
    const person1 = new Person();
    Person();
=> 브라우저에서의 출력 결과:
Person {}
Window {window: Window, self: Window, document: document, name: '', location: Location, …}

ex) //생성자 함수와 일반 함수와 메서드에서 this 찍어보기
    function foo(){
        console.log(this)
    }

    foo.myName = "홍길동";
    foo.getName = function(){
        console.log(this);
    }

    foo();  //함수 호출
    new foo();//생성자 호출
    foo.getName();//메서드 호출
=> 브라우저에서의 출력 결과:
Window {window: Window, self: Window, document: document, name: '', location: Location, …}
foo {}
ƒ foo(){
    console.log(this)
}

환경에 따라 만들어지는 전역객체의 종류가 다름. 브라우저에서의 자바스크립트 => window 객체, 노드제이에스 => glbal 객체
자바스크립트 엔진이 코드를 실행하기 위해 기동하면
    1. 빌트인 생성자 함수들을 포함한 빌트인 객체들을 만들어 낸다.
    2. 브라우저 환경에서 실행되고 있는지 노드제이에스에서 실행되고 있는지 실행환경에 맞는 글로벌 객체(전역 객체)를 만든다.
            브라우저 환경 => 전역 객체의 이름이 window
            노드제이에스 환경 => 전역 객체의 이름이 global
       전역 변수를 만들면 전역 객체의 property로 만들어짐.

객체는 const를 많이 사용한다. 왜? 객체는 보통 값 추가/변경/삭제를 하지 객체 재할당을 많이 하지 않기 때문에

객체 리터럴을 이용하여 만들기 => 이렇게 만든 것은 인스턴스가 아님, 리터럴 객체라고 부름   vs    생성자 함수를 이용한 객체 생성 => 이렇게 만든 것을 인스턴스라고 부름.

함수에서 return 값이 없으면 undefined가 리턴된다.
생성자 함수는 this(instance reference)가 묵시적으로 리턴되므로 일반적으로 return 문을 사용하지 않는다.

 ex)//생성자함수
    function Person(){
    }

    const person1 = Person();
    console.log(person1)

    const person2 = new Person();
    console.log(person2)

    const person3 = {};
    console.log(person3)

=> 생성자 함수로 만든 객체와 리터럴로 만든 객체는 다르다.
출력값:
undefined
Person {}
{}



일반 객체는 호출(call, invoke)를 할 수 없다.
함수 객체는 호출을 할 수 있다.
함수 객체는 호출을 가능하게 하기 위해서 몇몇개의 내부 슬롯과 내부 메소드를 가지고 있다.
일반 객체에는 없는 데 함수 객체에는 존재하는 대표적인 내부 슬롯과 내부 메소드:
    [[call]], [[constructor]]
    함수를 외부에서 호출하면 자바스크립트 엔진에 의해서 실제적으로 [[call]] 내부 메소드가 호출된다.
    함수 객체는 callable! 왜? [[call]]이라는 내부 메소드가 있기 때문에!
    즉, [[call]] 내부 메소드를 가지고 있는 모든 객체는 callable 객체이고 함수 객체는 callable이다.

    [[constructor]]는 객체를 만들기 위해 사용되는 내부 메서드.
    new라는 키워드를 붙여서 함수를 호출하게 되면(함수를 이용하여 객체가 생성될 때) 내부 메서드 [[constructor]]가 호출된다.
    즉, [[constructor]] 내부 메소드를 가지고 있어야 객체를 만들 수 있다.
    함수 생성 방법(1. 함수 선언문, 2. 함수 표현식, 3. class, 4. arrow function, 5. ES6의 함수 축약법(진짜 method))
    이렇게 다양한 함수 생성 방법들 중에 일부(1,2,3번 방법)만이 [[constructor]] 내부 메서드를 가지고 있다.
    따라서 1 & 2 & 3을 constructor, 4 & 5번 방법을 non-constructor라고 부른다.
    함수를 통해 인스턴스를 만들어 내는 것은 1,2,3번 방법만 가능하다. 모든 함수가 생성자 함수가 아니다.
    ex) 코드로 확인해보기!
        //1. 함수 선언문
        function foo(){}

        //2. 함수 표현식
        var bar = function(){};

        //3. 객체의 property로 함수가 할당
        const barx = {
            x: function(){}
        }

        new foo();
        new bar();
        new barx.x();
        //이 3개(1,2,3)는 constructor 내부 메서드를 가지고 있기 때문에 new 키워드를 통해 인스턴스를 생성 가능

        const arrow = () => {}

        new arrow();
        //arrow is not a constructor 에러 발생!
        //화살표 함수 객체는 [[constructor]] 내부 메서드를 가지고 있지 않다.

        const obj = {
            x(){

            }
        }
        new obj.x();
        //ES6의 함수 축약법 역시 [[constructor]] 내부 메서드를 가지고 있지 않다.


    ex) 배운 내용 test
    //생성자 함수
    function Circle(radius){
        this.radius = radius;
        this.getDiameter = function(){
            return 2 * this.radius;
        }
    }

    const circle = Circle(5);
    console.log(radius);    //5가 나옴. 왜? Circle()을 일반 함수로 사용했음 따라서 일반 함수 안에서의 this는 전역 객체를 가리키므로 전역 객체의 radius 속성에 5가 저장됨.
                            //따라서, radius는 전역 객체의 raius property가 호출되는 것.

* 함수 객체의 property
일반 객체가 가지지 않는 함수 객체가 가지는 고유의 property
    1. arguements property: arguements 유사 배열 객체를 property value로 갖고 있다. 따라서 일반 지역 변수처럼 사용 가능.
    2. caller property: 브라우저에 이미 구현되어 있지만 ES6에서는 비표준이며 앞으로도 표준이 될 확률이 적음. 따라서 표준에 어긋나는 것들은 사용자들이 되도록 사용하지 않는 것이 좋음.
                        그러나 여러가지 면에서 편리하다보니 대부분의 브라우저들에서 구현되어 있음.
                        해당 함수를 다른 함수가 호출했다면 호출한 함수에 대한 레퍼런스를 알 수 있음.(함수 자신을 호출한 함수에 대한 레퍼런스)
                        ex) 코드 테스트
                            function foo(f){
                                return f();
                            }

                            function bar(){
                                return 'caller: '+ bar.caller;
                            }

                            console.log(bar());     //caller: null
                            console.log(foo(bar));
                            => 출력 결과:
                            caller: null
                            caller: function foo(f){
                                return f();
                            }
    3. length property: 함수 파라미터의 개수. (arguements의 length와는 엄연히 다른 것!! aruements는 인수이므로)
    4. name property: 함수의 이름.
    ** 5. prototype property: 위의 property들과는 다르게, 함수들 중에 constructor만(함수선언, 함수 표현, class) 가지고 있다!!!
                                해당 함수(생성자 함수)가 생성하는 instance가 내부 슬롯[[Prototype]]으로 참조하는 객체(상위 프로토타입 객체)를 가리킨다.
                                대부분의 내부 슬롯은 직접 사용할 수 없지만 [[prototype]]만 접근자 property(__proto__)를 제공해줘서 접근이 가능하다.



    * 다시 리마인드!!
    자바스크립트 엔진이 시작함과 동시에
        1. built in 객체 생성(Object, String 등등등)
        2. 전역 객체 생성 (자바스크립트 엔진이 어느 환경에서 실행되느냐에 따라 자바스크립트 엔진이 만드는 전역 객체가 달라짐. 수업에서는 브라우저 위라고 가정하므로 window 객체를 만든다.)
        3. 식별자를 생성하면 윈도우 전역 객체에 property로 식별자를 붙인다. window 객체의 property에 접근할 때 window.키 대신 window를 생략하고 키만 사용해서 접근 가능.
            let, const는 윈도우 객체에 property로 동록되지 않는다. var는 윈도우 객체에 property로 등록이 됨.

        => 이렇게 객체 기반으로 동작하기 때문에 자바스크립트를 객체 기반 언어라고 한다.
        * 모든 객체는 [[prototype]] 내부 슬롯을 가지고 있다.

        생성자 함수 객체의 property
            - arguements property
            - caller property
            - length property
            - name property
            - [[prototype]] => 상위 프로토타입 객체를 가리킨다.
            - protype property => 자기 자신의 프로토타입 객체를 가리킨다.
        * 함수 객체가 만들어지는 순간 prototype 객체가 함께 생성된다. 함수 객체의 prototype property가 prototype 객체를 가리킨다.
        또한 인스턴스가 생성되면 인스턴스의 [[prototype]]이 prototype 객체를 가리킨다.
        따라서, 만약 찾는 값이 없으면 체인을 타고 위로 올라가서 값을 찾는다. 이게 바로 prototype chain!!
        자바스크립트 엔진은 우리도 prototype을 잘 사용할 수 있도록 접근자 property를 제공해준다. 이게 바로 __proto__
        __proto__ property를 통해서 prototype 객체에 접근 가능!
        결국 모든 인스턴스가 prototype 객체를 공유하고 있다.
        자바스크립트는 상속 관계를 동적으로 바꿀 수 있다! 객체.prototype 또는 인스턴스.__proto__를 통해서 prototype 객체의 property에 접근 가능

        Q. 왜 이렇게 만들어져서 사용을 해야할까?? 상속(Inheritance)을 구현하기 위해서!!
            ex)
                function Circle(radius){
                    this.radius = radius;
                    this.getDiameter = function(){
                        return 2 * this.radius;}
                }

                console.log(circle1.getDiameter === circle2.getDiameter)    //false, 인스턴스에 대해 함수가 각자 독립적으로 만들어지고 있다.
                                                                            //이에 따라 속도도 느려지고 메모리 낭비도 심해진다.
            공통적인 개념들은 prototype을 통해 상속하여 사용하도록 한다.

            function Circle(radius){
                this.radius = radius;
                Circle.prototype.getDiameter = function(){
                    return 2 * this.radius;
                }
            }
            console.log(circle1.getDiameter === circle2.getDiameter)        //true, 상속을 통해 내려받아서 사용하기 때문에 공통으로 사용한다.

        ex) prototype 동작 예제
            function Circle(radius){
                Circle.prototype.name = '홍길동'
            }

            const circle1 = new Circle();
            const circle2 = new Circle();

            console.log(circle1.name,circle2.name);
            circle1.name = '아이유'                 //이렇게 하면 circle1에만 property로 name이 생성되고 '아이유' value가 할당됨.
            console.log(circle1.name,circle2.name);
            circle1.__proto__.name = '아이유'       //Circle.prototype.name = '아이유'와 동일!
            console.log(circle1.name,circle2.name);
            => 출력 결과:
                홍길동 홍길동
                아이유 홍길동
                아이유 아이유

        상속을 통해 중복을 최소화하고 효율성을 극대화할 수 있다! => 하지만 상속이 항상 좋은 것은 아니다. (그로 인해 각각의 클래스들을 독립적으로 자유롭게 사용하기 어려움. => 이를 개선하기 위해 등장한 것이 자바의 인터페이스)

    * 정리
    모든 객체는 [[prototype]]이라는 내부 슬롯을 가진다.
    [[prototype]]이 가리키는 것은 자신의 상위 프로토타입 객체. 프로토타입 객체도 객체의 생성방법에 따라 종류가 달라진다.
    그리고 알아두어야 하는 prototype 객체가 가지고 있는 property가 하나 더 있다.
    prototype 객체의 constructor property는 생성자 함수 객체를 가리킨다.



* Rest parameter(ES6에서 등장)
arguments 유사배열 객체보다는 rest parameter를 쓰는 게 더 좋다.
Rest parameter는 Array로 사용! 가변인자함수를 만들 때 사용!
Rest parameter는 ...으로 표현.
Rest parameter는 매개변수 중 제일 마지막에 위치! 2개 이상 사용 불가!(하나만 맨 뒤에 써야 함)
단, arrow function에서는 arguments를 못쓴다! rest parameter만 이용 가능!

    ex) arguments와 rest parameter의 차이를 출력해보기
        function foo(...args){
            console.log(arguments);
            console.log(args);
        }

        foo(1,2,3,4,5);
    => 출력 결과:
    [Arguments] { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 }
    [ 1, 2, 3, 4, 5 ]

