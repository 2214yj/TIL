# 0708

Javascript class => "문법적 설탕"

좀 더 우리한테 익숙한 클래스를 적용시켜보자!(ES6)

programming 패러다임 -> 프로그래밍 방법론
- 객체지향
- 함수형 (구조적, 절차적 프로그래밍)
- 선언적 프로그래밍

* 구조적 프로그래밍, 절차적 프로그래밍
예전에는 구조적 프로그래밍과 절차적 프로그래밍을 주로 했다. ex) C언어
    1. 프로그램을 기능적으로 세분화 시킨다. ~기능, ~기능
    2. 각각의 기능들을 독립적인 단위(모듈)로 만든다. => 함수화 시킨다. 이때 사용되는 것이 function(함수)

구조적 프로그래밍, 절차적 프로그래밍은 설계가 쉽기 때문에 프로그램을 쉽고 빠르게 구현 가능.
    => 여러 가지 모듈들을 여기저기에서 가져다 사용하기 때문에 복잡하게 얽혀있다. 유지보수가 어렵다.
    인터넷과 사회구조가 빠르게 발전하면서 사람들의 요구사항이 많아졌고 유지보수 요구가 늘어났다.
    => 객체자향 개념이 생기고 객체지향 개념을 반영한 프로그래밍 언어들이 등장하기 시작
    언어마다 객체지향을 바라보는 시선이 조금씩 다르다.

* 객체지향 프로그래밍 -> "유지보수"
    현실의 문제를 그대로 프로그램으로 옮기자.
    프로그램을 기능으로 세분화하지 않는다.
    => 현실세계의 내가 해결해야 하는 문제를 프로그램적으로 표현하려고 노력한다. (모델링)
    프로그램적으로 어떻게 모델링을 할 것인가?
    => 모델링을 하기 위해서 문제를 구성하는 구성요소로 파악하려고 한다.
    그 구성요소 간에 어떤 정보들이 오고가는지를 파악해서 현실세계의 문제를 프로그램으로 묘사한다. => 필요한 부분만 추상화하여 사용.(추상화, Abstraction)

    주체의 상태와 행위를 나눠서 상태는 변수에, 행위는 함수에 저장하자.
    클래스: 객체를 모델링하는 수단. instance를 만들어내는 수단. ADT(추상 데이터 타입)을 만들어내는 수단.


Javascript는 프로토타입 기반의 객체 지향 언어, 객체 기반 언어(완벽한 객체 지향을 반영하지 못하는 언어라는 평을 받기도 한다.)
    - class가 필요없다. 프로토타입으로 상속 구현 가능.
        하지만 사람드르이 요구에 따라 ES6에서 class 개념을 도입했다.
    ex) class 사용 예시
    //class define
    class Person{

    }

    //익명 class 표현식
    const Person = class {}

    //기명 class 표현식
    const Person2 = class MyClass{};

자바스크립트 클래스의 특징
    - 생성자 함수와 유사하다. 따라서, 클래스는 자바스크립트 함수이면서 객체이다. => 클래스를 통해 인스턴스를 생성할 수 있다.
    - 클래스는 반드시 new 키워드와 함께 써야 한다.
    - 클래스는 클래스 간의 상속을 지원한다. => extends 키워드 사용하여 상속. super 키워드를 통해 부모 클래스에 접근 가능.
    - 클래스 역시 함수이기 때문에 hoisting이 발생한다. (그러나 마치 hoisting이 일어나지 않는 것처럼 보임. let&const의 hoisting과 동일하게 동작하며 마찬가지로 temporal deadzone이 발생함.)
    - class 내부 코드는 strict mode가 default로 동작한다.
    - class 안에는 3가지(constructor, prototype 메서드(prototype 객체에 설정이되어서 인스턴스한테 상속을 주는 메서드), static 메서드)가 나온다.
        => property의 property atribute의 값은 모두 false이다.
    - class는 0개 이상의 메서드(ES6)로 구성되어 있다. 클래스 안에는 ES6 축약표현의 메서드만 올 수 있다.
        1. constructor method(생성자): 인스턴스를 만들고 인스턴스를 초기화해준다. 따라서 constructor가 반드시 호출되어야 한다. 만약 constructor를 명시하지 않으면 자바스크립트 엔진이 default constructor를 자동으로 만들어준다.
                                     다른 언어와 다르게 한개만 존재할 수 없다.(자바스크립트는 오버로딩의 개념이 없기 때문이다.)
        2. prototype mothod
        3. static method

        ex) constructor, prototype, static method 사용 예시
        class Person {
            // constructor(생성자)
            constructor(name){
                // instance의 초기화
                // instance의 property를 설정
                // 묵시적으로 this가 리턴된다.
                this.name = name;
            }

            // prototype 메서드
            sayHello(){
                console.log('안녕하세요.');
            }

            //static 메서드
            static sayHi(){
                console.log('요건 static');
            }
        }

        const me = new Person('홍길동');

    - class 역시 hoisting이 가능하다. 그러나 temporal deadzone이 발생할 수 있기 때문에 class는 맨 위에서 선언한다.
    - new 키워드로 instance를 생성 -> 클래스 이름이 아니라 식별자를 사용한다. -> instance가 실제 만들어지는 함수는 constructor. this 키워드와 바인딩하고 끝나면 묵시적으로 this return
    - instance를 생성해서 해당 인스턴스를 브라우저에서 살펴보자!
        => class로 메모리 구조를 살펴볼 수 있다.
    - Constructor는 2개 이상 존재할 수 없다. 무조건 한 개만 있을 수 있다. constructor는 생략 가능하다.(자바스크립트 엔진에 의해서 인자가 벗고 하는 일이 없는 constructor가 default로 삽입된다.)
        Constructor는 묵시적으로 this를 리턴하기 때문에 return 구문을 사용하지 않는다.
    - 접근자 property(property 임에도 값을 갖지 않고 어디에 접근하는 데 사용. 일반적으로 다른 propery의 값을 읽어오거나 혹은 값을 저장할 때 사용한다.) => getter, setter! 데이터를 보호를 위해 데이터가 직접적으로 핸들링되는 것을 방지한다.
        setter는 인수를 하나만 가진다! (자바스크립트는 오버로딩이 안되기 때문에)
        객체 literal에서 접근자 property를 써 보아요!
        ex) getter, setter 사용해보기
            // 객체 리터럴을 이용해서 객체를 생성
            const Person = {
                constructor(firstName, lastName){
                    this.firstName = firstName;
                    this.lastName = lastName;
                }

                // get을 이용하면 반드시 return 구문이 존재해야 한다.
                get fullName(){
                    return `${this.lastName + this.firstName}`;
                },
                set fullName(name){
                    //유효성 검사를 추가하면 이상한 데이터가 들어오는 것을 방지할 수 있다.
                    [this.lastName, this.firstName] = name.split(' ');
                }
            }

            const me = new Person('예지','김');
            me.fullName = '김 연아';
            console.log(me.getName());

* 클래스의 상속
코드의 중복을 막기 위해서 코드를 효율적으로 재사용하기 위해서 클래스의 상속을 사용한다.
클래스가 상속관계에 있을 때 위에 있는 클래스를 super class(parent class, upper class, base class) 아래에 있는 클래스를 sub class(child class, lower class, Derived class)라고 부른다.
상속 관계에 있는 것을 지칭하는 용어 => 'is-A relationship' 포함관계!  sub class is a super class, sub class는 super class의 데이터 타입을 사용 가능. (다형성(polymorphism): 하나의 객체를 여러가지 형태로 사용할 수 있다.)
재활용을 위해 상속을 사용하면 하위 클래스와 상위 클래스는 밀접한 관계가 있다. => 그런데 상속관계는 밀접한 관계가 있으므로 같이 다녀야 한다. => 상속이 등장하게 된 이유(코드를 효율적으로 재사용)와 모순됨 => 자바에서는 이를 개선하기 위해 interface가 등장!

* 상속에 따른 class에 따른 확장은 prototype 기반의 상속과는 다르다.
체인 자체가 다르게 만들어진다.
