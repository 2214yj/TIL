# 0705

자바스크립트 => 객체 기반의 언어. (완벽하게 객체 지향을 표현하진 못하지만 객체를 사용하긴 하므로). 자바스크립트를 구성하는 대부분은 객체.

Q. 왜 굳이 Primitive Value를 immutable로 만들었을까?
기존의 값들이 지워지게 되면 오류를 추적하기 어려움(값을 지웠다 쓰지 않고 메모리를 참조함으로써 이 값이 어떠한 과정을 거쳐왔는지 알기 쉬움)
반면에, 객체는 mutable => 객체는 크기가 크기 때문에 계속해서 값을 생성하게 되면 메모리 낭비가 큼.


** 객체
객체: 0개 이상의 property의 집합. 각 property는 키와 값의 쌍으로 이루어짐. JSON과 동일하게 생겼지만 "Javascript 객체 != JSON"
JSON은 자바스크립트 객체 형식을 따와서 만든 데이터 전달을 위한 형식.

- property의 key: 문자열, Symbol만 가능. 만약 문자열이 식별자 Naming Rule을 잘 따르고 있다면 꼭 '',""을 안써도 됨! 
- property의 value: 자바스크립트에서 값이라고 표현되는 모든 것. value로 함수도 사용 가능!(함수 자체를 하나의 객체, 하나의 값으로 간주하기 때문에) => 이를 메소드(method)라고 부름.

자바스크립트에서의 method의 의미는 조금 다름. 메소드의 정의가 협소함. 
자바스크립트 내에서 기존에 우리가 알던 개념으로 메소드가 존재하지 않음. 자바스크립트 객체는 property의 집합. 모든 게 다 property! property 중 value가 함수인 것을 통상적으로 메소드라고 부름.(결론: property의 value가 함수인 것 => 통상적으로 메소드라고 부른다!)

* 객체 생성
총 5가지 방법이 있음.
    1. 객체 리터럴을 이용한다. => 가장 간단한 방법! 그러나 똑같은 형태의 객체를 여러 개 만들어야 할 때 매우 비효율적. 
    2. 자바스크립트가 내부적으로 가지고 있는 빌트인 생성자, Object 생성자 함수를 사용한다.
    3. 사용자가 만든 생성자 함수(user defined)를 사용한다.
    4. Object 생성자 함수가 갖고 있는 create() 메소드를 사용한다.
    5. ES6에서 생긴 class를 이용한다. (사용자에게 익숙한 형태로 사용할 수 있게 하기 위해 class를 제공)

자바스크립트는 객체의 property를 동적으로 추가할 수 있음 => 굉장히 유연하게 사용 가능하지만 오류가 발생할 사이드 이펙트가 큼.

* property의 동적 추가와 삭제
    1. . notation 사용.
    2. [] notation 사용 : 식별자 naming rule에 맞지 않는 property key를 사용할 경우에는 []를 사용해야 함!
    3. 삭제의 경우 delete keyword 사용.

* 기타 case
- 키 값을 중복해서 사용해도 됨. 뒤에 나온 게 먼저 것을 덮어씀.
- 없는 property key로 value를 호출하면 undefined가 호출됨.

* ES6에서 추가된 객체 리터럴 확장 기능
- 변수를 가져와서 축약해서 객체 생성 가능
ex)
    let x = 10;
    let y = 20;
    const obj = {x,y};
- 함수도 축약으로 표현 가능(이게 자바스크립트의 진짜 메소드!)
    let obj2 = {
        printName(){
            console.log('hi')
        }
    }

* Primitive Value(원시값) vs 객체
    (immutable)            (mutable)
- 마치 Primitive Type을 객체(배열)처럼 사용 가능. ex) 문자열[인덱스], 문자열.기본 메소드() 사용 가능.
=> 원래는 Primitive Value를 가지고 있었는데, 객체처럼 사용하는 순간 내부적으로 유사배열 객체(Array Like Object)가 만들어져서 객체와 같이 사용 가능. 사용이 끝난 후, 다시 유사배열 객체를 없앰.
ex) let myStr = 'Hello'
    myStr[0] = 'h'  //유사배열 객체에 0이라는 키 값을 통해 접근
    console.log(myStr)  //'Hello'가 출력됨. 유사배열 객체가 만들어졌다가 사용 후, 유사배열 객체가 없어지기 때문에 문자열 자체를 바꿔주지는 않음.

- 레퍼런스 객체를 복사하면 똑같은 주소를 가리키게 되므로 같은 객체를 가리키게 됨. 따라서, 한 쪽에서의 변경사항이 다른 쪽에도 동일하게 적용됨.





** 함수(function)
일련의 과정을 수행하기 위한 statement를 중괄호 {}를 이용해서 하나의 실행단위로 만들어 놓은 것.
반복적인 코드를 함수화시켜서 유지보수성이 높아지고 오류가 발생할 여지를 낮춤.(코드의 실뢰도 증가)
함수는 객체. 그러나 함수 객체가 자동적으로 가지는 property의 종류가 객체가 자동적으로 가지는 property의 종류가 다름.

* 함수 정의(함수는 선언이라는 표현을 쓰지 않고 정의(definition)을 사용)
함수를 정의한 다음 호출(call, invoke)하여 사용.
parameter(매개변수)는 함수를 정의할 때, arguement(인수, 인자)는 함수를 호출할 때

* 함수 literal
ex)
    var func = function add(x,y) { ... }
함수 이름은 당연히 식별자! 식별자 naming rule을 지켜야 함.
함수 이름은 함수 내부에서만 사용이 가능.(외부로 노출되지 않음)

* 함수를 정의(definition)하는 법
1. 함수 선언문
    함수 literal과 똑같이 생겼지만 변수에 할당하지 않음.
    묵시적으로 함수 이름과 똑같은 변수를 하나 만들어서 사용함.
    ex) function add(x,y) { return x+y; }
2. 함수 표현식
    ex) var add = function(x,y) { return x+y; }
3. Function이라는 빌트인 생성자 함수를 이용(불편해서 잘 사용되지 않음. 대신 상속 관계 등을 표현 가능)
    함수의 기능을 문자열로 표현해서 전달해야 하기 때문에 사용하기 불편함.
    ex) var add = new Function('x', 'y', 'return x+y');
4. 화살표 함수(축약 표현)
    ex) var add = (x,y) => x+y;


* 함수 선언문 vs 함수 표현식 hoisting
함수 선언문이냐 함수 표현식이냐에 따라 hoisting이 달라진다.
함수 선언문은 변수가 함수명과 동일하게 임의로 생겨서 초기값으로 함수가 할당된다.
함수 표현식은 변수에 undefined로 초기 할당되기 때문에 호출 후 함수 표현식을 사용한다면 함수가 아니라 변수라는 에러가 발생한다.
=> 함수 선언문은 에러가 발생하지 않으므로 잠재된 위험성을 갖고 있음. 상식에 어긋남. 상식을 토대로 생각했을 때 함수 표현식을 사용하는 것이 맞다.

함수 이름은 함수 내부에서만 사용할 수 있다. 따라서, 함수는 함수 이름으로 호출하지 않고 함수의 식별자를 이용하여 함수를 호출한다.
자바스크립트는 인자의 개수가 일치하지 않아도 식별자가 존재만 하면 해당 함수를 무조건 호출한다. 만약 전달된 인자의 개수가 매개변수의 개수보다 적으면 나머지 인자는 undefined 값을 가진다.
인자가 함수 내부의 arguements 객체에 전달됨. arguements는 유사배열 객체이다. 유사배열 객체(Array Like Object)는 length라는 property를 갖고 배열처럼 iterable한 특성을 가진다.(index를 이용해서 access 가능! 순환 가능!)
함수는 return이 없으면 undefined가 결과적으로 리턴됨.

IIFE(즉시 실행 함수, Immediately Invoked Function Expression)
함수를 선언함과 동시에 호출(call, invoke). 함수의 재사용이 안된다. 재사용이 안되므로 굳이 이름이 있을 필요가 없기 때문에 익명 함수(anonymous function)로 사용한다.
지역 스코프를 생성하여 사용하기 위해 IIFE를 사용한다.(전역변수를 최소화해주기 때문에 라이브러리, 파일 간의 변수 충돌을 막을 수 있음)
ex) 
    (function(){
        let x = 10;
        let y = 30;
        console.log(x+y)
    }())

* 중첩함수(nested function), 내부함수(inner function), 외부함수(outer function)
모든 스코프는 체인으로 얽혀 있다. 지역부터 전역까지 순차적으로 해당 식별자가 있는지 찾는다. 따라서, 전역변수는 가장 마지막에 찾아지기 때문에 전역변수를 많이 사용하면 프로그램이 느려진다.

Q. 잘 동작하는 기존의 함수를 변경해야 할 때 원래 있는 함수를 수정해야할까?
방법1. 원래 함수를 수정     
방법2. 함수를 새로 추가해서 만든다. (거의 동일한 함수를 하나 더 만듦)
=> 자바스크립트는 함수형 언어이기 때문에 이러한 문제를 좀 더 쉽게 해결 가능!
first-class citizen object(일급 객체): 4가지 조건을 만족하는 객체는 일급 객체이다. 따라서, Javascript 함수는 "일급객체"!!!
    1. 익명의 literal로 생성 가능 => 동적으로 생성 가능하다(runtime에 동적으로 생성됨)
    2. 객체를 변수나 자료구조에 저장 가능
    3. 객체를 다른 함수의 인자로 전달 가능
    4. 함수의 리턴값으로 객체를 사용할 수 있다.

=> 방법3. 함수를 추상화 시켜서 인자로 받아서 사용! => 예제에서 logAll이 콜백 함수, repeat이 고차함수(Higher-Ordered Function)
    ex) function repeat(n,f){
            for (var i=0; i<n; i++){
                f(i);
            }
        }

        repeat(5,logAll)    //함수를 넘겨줄 때 함수를 호출하는 것이 아니라 함수의 주소값을 넘겨줘야하기 때문에 ()없이 함수 이름만 넘겨주면 된다.

* Callback Function
고차함수(Higher-Ordered Function)과 함께 사용됨. 

* Scope: 식별자가 유효한 범위.
Javascript Engine이 Indentifier를 찾을 때 사용하는 매커니즘이 바로 scope chain(모든 스코프는 체인에 연결되어 있음. 모든 스코프는 결국에 global scope와 연결되어 있음)

Javascript Engine은 코드를 실행할 때 문맥(context)을 고려해서 실행.
즉, Javascript Engine은 현재 실행 중인 코드가 어디에 있는 코드이고 코드 주변 정보를 파악해서 실행. 이를 "Lexical Environment"이라고 한다.
이것을 실제로 구현해 놓은 것이 "execution context" 또한 execution context에는 실행 스택과 데이터 스택이 분리되어 있다. 그렇기 때문에 클로저와 같이 이상한 현상들이 발생한다.


함수가 호출되었을 때 scope를 함수가 호출된 곳을 기준으로 설정 => dynamic scope, 동적 스코프
                함수가 정의된 곳을 기준으로 설정        => static scope, lexical scope, 정적 스코프
자바스크립트를 포함한 대부분의 프로그래밍 언어는 lexical scope를 따진다. 
    ex) var x = 1;

        foo();

        function foo(){
            var x = 10;
            bar();
        }

        function bar(){
            console.log(x);
        }
        => 1이 출력된다. 자바스크립트는 lexical scope이므로 함수가 정의된 곳을 기준으로 스코프를 설정하고 지역 스코프에서 식별자를 찾지못하면 전역 스코프에서 식별자를 찾는다.

* 전역변수
1. 가독성이 나빠지고 신뢰도가 낮아진다.(오류 발생 확률 증가)
2. 메모리 리소스를 너무 많이 소모한다.
3. scope chain에서 가장 마지막에 찾으므로 늦게 찾고 효율이 떨어진다.
4. 같은 전역 공간을 여러개의 자바스크립트 파일들이 같이 사용하기 때문에 변수 충돌이 발생할 확률이 높다.
=> 이러한 기타 등등의 이유로 인해서 꼭 필요한 경우가 아니라면 전역변수 사용을 줄여야 한다.

* 객체는 property의 집합! 0개 이상의 property로 구성되어 있다.
property(key와 value로 이루어진 하나의 쌍)는 property attribute를 가진다. 

Javascript의 모든 객체는 내부 slot과 내부 method를 가지고 있다.
내부 slot의 형태 -> [[...]]
내부 method의 형태 -> [[...]]
내부 slot과 내부 mothod는 개발자가 직접적으로 사용할 수 없다. 자바스크립트 엔진에 의해 사용된다.
모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖는데, 내부 슬롯은 자바스크립트 엔진의 내부 로직이므로 직접 접근할 수 없다. 하지만 [[Prototype]] 내부슬롯의 경우, __proto__를 통해 접근 가능하다.
obj.__proto__를 제공하여 우리가 프로토타입에 접근할 수 있도록 해줌. obj.__proto__ => [[prototype]]에 접근하기 위함.

property attribute는 객체의 property를 생성할 때 해당 property의 상세를 나타내는 값. 기본적으로 자동으로 정의됨.
property attribute를 조작해서 객체를 세세하게 제어할 수 있다.
property의 상세:  1. property 값. 해당 property가 어떤 값을 가지고 있느냐 [[value]]
                2. property의 값을 수정할 수 있는지에 대한 여부         [[writable]]
                3. 해당 property가 열거될 수 있는지에 대한 여부         [[Enumerable]]
                4. 해당 property attribute를 재정의(재할당)할 수 있는가 [[Configurable]]
ex) //property attribute를 확인해 보아요!
    const person = {
        name: 'lee',
        age: 20
    }

    console.log(Object.getOwnPropertyDescriptor(person, 'name'))
=> { value: 'lee', writable: true, enumerable: true, configurable: true }을 출력한다.
ex) //모든 property attribute를 확인해 보아요!
    console.log(Object.getOwnPropertyDescriptors(person)
=>{
  name: {
    value: 'lee',
    writable: true,
    enumerable: true,
    configurable: true
  },
  age: { value: 20, writable: true, enumerable: true, configurable: true }
}을 출력한다. 

* Property define
Objec.defineProperty()를 통해 define 가능.
property attribute를 조절하여 property 속성을 제어 가능!
ex) Object.defineProperty(person, 'name', {
        value: 'lee',
        writable: false,
        enumerable: true,
        configurable: true
    });

