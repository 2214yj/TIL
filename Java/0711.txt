# 0711

** 자바 언어의 특징
- 운영체제 독립적! => JVM(Java Virtual Machine)
각각의 하드웨어 위에 OS가 올라가고 그 위에서 JVM이 구동되며 JVM 위에서 자바 프로그램이 실행된다. JVM은 OS 종속적이다. JVM은 C나 C++으로 만들어졌다. JVM은 OS에 따라 종류가 다르다.
- 이러한 특성 때문에 속도가 상대적으로 느리며 하드웨어의 직접적인 제어가 불가
- 여러가지 옵티마이저들이 등장하여 속도가 개선됨 (예전에 비해 C언어의 속도를 많이 따라 잡음)

c언어는 컴파일 과정을 통해 machine code로 변환되는 컴파일러 언어. (속도 빠름)
자바스크립트는 엔진이 스테이트먼트 한줄 한줄을 읽어들여서 interpret하는 인터프리터 언어. (엔진이 소스코드를 읽어들여서 중간 코드로 변환하고 이를 machine 코드로 변환하는 과정을 매 statement마다 겪기 때문에 속도 느림)
자바는 소스 코드를 컴파일하여 중간 단계 코드(바이트 코드)로 변환하고 JVM이 이를 읽어들여서 머신코드로 바꾸고 실행한다. (컴파일러 언어와 인터프리터 언어가 혼합된 방식)

- 편리를 위해 객체 지향을 살짝 우회해서 표현하는 점이 있다. 자바는 다른 언어들에 비해 객체 지향 개념을 가장 잘 표현한다.
- JVM 위에서 동작하기 때문에 하드웨어나 메모리에 대한 직접적인 제어를 할 수 없다. 따라서, garbage collection에 의해서 메모리가 자동으로 관리된다. (직접 프로그래머가 세밀하게 제어하는 것이 효율성이 가장 좋지만 신경쓰지 않아도 된다는 장점이 있다.)
- 다른 언어들에 비해 네트워크와 분산처리하기 수월하다.
- Dynamic Loading을 제공!! 메모리의 효율적인 사용과 속도를 위해서 필요한 클래스를 동적으로 로딩할 수 있다.


* 자바 개요
자바 프로그램은 클래스의 모임. 자바 프로그램은 전역에 대한 개념이 없다.(클래스들을 아우르는 전역 공간에 대한 개념이 없다.)
.java 파일 안에 class를 정의한다. 원칙은 자바 파일 하나에 클래스 하나를 정의하는 것이다.(재사용하는 가장 기본적인 단위가 클래스이기 때문에 재사용성과 유지보수를 위해서) 하지만 하나의 자바 파일에 여러개의 클랙스들을 정의해도 상관없이 잘 동작한다.(원칙은 원칙일 뿐 필수는 아님)
JVM만 있으면 일반적으로 프로그램을 실행시킬 수 있을까? JVM과 더불어 자바가 제공해주는 API (Java class library, 자바는 일반적으로 라이브러리도 클래스 단위로 구현되어 있음)가 있어야 된다.
이를 자바 실행 환경(JRE, Java Runtime Environment)라고 부른다.
이러한 개발 도구들을 모두 통틀어 JDK(Java Development Kit)이라고 부른다.
자바의 첫번째 변곡기: JDK 1.5 버전(Java 5) 네이밍까지 Java 5로 아예 바꿔버렸다.
자바의 두번째 변곡기: JDK 1.8 버전(Java 8)
이제는 base를 JDK 1.11 버전(Java 11)로 잡는 것이 좋다. Java 최신 버전은 충돌 등의 이유로 현업에서 잘 사용하지 않는다.



"Programming Paradigm"
- 객체지향 언어(Java)
    1. 해결해야 하는 문제의 구성 요소를 파악하고 데이터가 어떻게 전달되는지 파악한다. 그러나 분석 설계가 어려우며 분석 설계가 중요하다.
    2. 현실 세계의 문제를 프로그래밍적으로 잘 묘사해놓았기 때문에 유지보수하기 수월하다.

- 구조적, 절차적 프로그래밍 언어(C)
    1. 기능으로 프로그램을 세분화한다.
    2. 빠른 분석과 설계가 가능 -> 프로그램을 쉽고 빠르게 만들 수 있음
    3. 유지보수에 취약하다.

* 현실세계를 구성하는 구성요소 중 필요한 요소들만 가지고 프로그램으로 구현한다. 그리고 각각의 구성요소들이 어떤 데이터를 주고받는지를 파악해야 한다.
ex) 학생 - 상태: 이름, 학번, 학과, 키, 자산, 몸무게 ... => 학사 프로그램에서는 이름, 학번, 학과만 필요
        - 행위: 등교한다, 출석하다, 화장실간다 ... => 학사 프로그램에서는 등교하다, 출석하다만 필요
=> 이렇게 필요한 특징들을 뽑아내어 단순화하는 작업을 추상화(Abstrction)이라고 한다. 이를 클래스라는 도구를 이용해서 Modeling하여 프로그램으로 묘사해야 한다. class는 객체 모델링의 수단

자바는 클래스 안에서 상태를 변수를 이용한 필드로 표현하고 행위를 함수 형태와 같은 메서드로 표현한다. 따라서, 클래스의 2가지 요소는 필드와 메서드.
함수의 개념과 메서드의 개념은 다른 개념. 자바에서는 함수를 사용하지 않고 메서드만 사용한다.

패키지명은 도메인명을 거꾸로 사용(도메인은 유니크하므로 식별하기 쉽다)
ex) com.kakao.test

* source code 생성
1. source code의 이름(파일명)을 클래스의 이름과 같아야 한다. 정확히 말하면 파일명은 public 클래스명과 동일해야 한다.
2. public class가 없는 경우는 일반 클래스 이름을 따서 만든다.(파일명은 무조건 클래스명에서 따온다!)
3. 파일 하나 안에 클래스는 여러개가 나올 수 있다. 단, 이중에 public class는 하나의 파일에 최대 한개 있어야 한다.(두개 이상 존재 불가)
4. 프로그램의 시작 지점(entry point)은 public static void main(String args[]) 메소드. 코드의 진짜 시작점은 Main 메서드가 아닐 수 있음. 일반적으로 Main 메서드에서 시작.

* 동작 과정
Student.java 파일을 javac 명령을 실행하면 똑같은 이름의 바이트 형태의 Student.class 파일이 결과로 나온다.
'java Student' 명령어로 Student.class 실행 가능.
파이을 실행하면 JVM이 내부적으로 실행되면서 1. class Loader가 호출된다. 2. 바이트 코드가 제대로 된 바이트 코드인지 파일을 검사하며 악성 코드가 있나 체크. 3. main()을 호출한다. 만약 main()이 없으면 entry point가 없으므로 실해이 안된다.

* language spec
javascript와 거의 유사하다.
변수를 만들때 식별자 사용. 식별자에 대한 naming rule은 javascript와 동일하다. Naming convention도 유사하다.
가장 큰 차이점은 java는 정적 타입 언어라 값 뿐만 아니라 변수에도 data type이 붙는다.

* Java Data Type
- Primitive Type: 8개로 나눠진다.   byte, short, int, long은 정수형 / float, double은 실수형 / char은 문자형 / boolean은 논리형
    - byte: 1 byte
    - short: 2 byte
    - int: 4 byte(가장 많이 사용), int가 가장 효율이 좋다.
    - long: 8 byte
    - float: 4 byte
    - double: 8 byte. 실수의 기본 데이터 타입은 double.
    - char: 2 byte. 2 byte unicode 체계를 사용한다.
    - boolean: 1 byte. true, false 독립적인 값이다. 다른 것으로 캐스팅 불가!

- Reference Type: 1개로 나눠진다.
    - class(ADT, 내가 원하는 형태로 만들 수 있는 데이터 타입)

* 상수
값이 재할당되지 않음. 여기서는 final 키워드를 사용한다.
1. 선언과 동시에 초기화가 된다.
2. 상수는 기본적으로 전체를 대문자로 사용하고 스네이크 케이스 네이밍 컨벤션을 따른다. ex) final int MY_SCORE = 100;

* 형 변환
- 묵시적 형 변환(지정해주지 않아도 알아서 자동으로 형 변환)
- 명시적 형 변환(type casting): () 괄호를 이용해서 형변환.

* String
String -> class -> reference type -> 문자열
char 문자 데이터 타입과 전혀 다르다. String은 분명한 클래스이지만 워낙 문자열이라는 데이터 타입을 많이 사용하다보니 일반적인 Primitive type처럼 사용 가능하도록 제공해주고 있다.



** class
field들의 집합, constructor들의 집합, 메소드들의 집합

* JVM이 관리하는 메모리 구조
1. Register: 프로그램의 실행 포인터를 관리하는 영역(JVM에 의해서만 관리)
2. Runtime constant pool: 정해져 있는 혹은 만들어지는 상수값들이 여기서 관리됨. 여기 안에는 String pool이 존재하는 데, String pool은 문자열에게 별도의 처리를 해줌.
3. Method Area: 클래스 자체에 대한 정보(필드에 대한 정보, 메소드에 대한 정보)가 들어간다. 클래스를 처음 사용하는 시점에 메모리에 올라간다.
4. Heap: 클래스로부터 나온 인스턴스들이 저장된다. new 키워드로 만들어진 인스턴스들이 저장된다.
5. call Stack: 메서드가 호출되면 스택 구조로 아래서부터 일정량의 공간이 잡힌다. (지역 변수 등 메서드가 사용할 공간을 할당하기 위해)

instance variable, instance method => 인스턴스가 생성될 때 공간이 생성됨. 인스턴스가 생성되어야 사용 가능.
class variable, class method => memory area 안에 class 정보 안에 공간이 생성. class에 대한 정보가 method area에 올라갈 때 생성됨. 모든 인스턴스에 의해 공유됨. Heap의 인스턴스 데이터 중 static variable/method는 method area의 해당 variable/method를 가리킨다.
=> class variable과 class method는 인스턴스의 존재유무와 상관없이 사용 가능.

* Constructor(생성자)
1. java의 모든 class는 constructor를 한 개 이상 가진다.
2. 만약 javac가 컴파일할 때 생성자가 없다면 default constructor를 자동으로 생성해준다.
3. constructor는 메서드가 아니다. 메서드 취급은 하지만 메서드와는 다르다. 메서드와 달리 return 하지 않는다.
4. 생성자의 이름이 클래스명과 동일하다.
5. 인스턴스의 초기화를 담당한다.

* 메소드 오버로딩
인자의 개수와 타입만 다르다면 똑같은 이름의 메소드를 여러개 가질 수 있다.
=> 생성자에게도 적용됨. Constructor Overloading

{인스턴스/class}.{field/method}
ex) System.out.println();
=> System class의 out static field의 println() 메서드

ex)
package com.kakao.test;

public class Student {
	static int a = staticCall("1");
	int b = staticCall("2");

	public static int staticCall(String msg) {
		System.out.println(msg);
		return 100;
	}

	public Student() {
		this.b = staticCall("3");
	}

	public static void main(String[] args) {
		System.out.println("4");
		int c = staticCall("5");
		Student s = new Student();
	}
}
=> 출력 결과:
1   //클래스 정보를 훑으면서 static 변수/메서드는 곧바로 공간이 할당되고 실행 가능하므로 가장 먼저 실행된다.
4   //main 메서드가 호출되면서 출력됨
5   //main 메서드 내에서 staticCall 메서드가 호출되어 출력됨
2   //Student 인스턴스를 생성하면서 인스턴스 변수 b의 공간이 할당되고 staticCall이 호출됨
3   //Student 인스턴스가 생성된 후 마지막으로 호출됨

* 기본적인 class의 형태
=> class를 관리하고 재사용할 수 있어야 한다.
가장 원시적인 방법 => class file이나 source file을 우리 project의 같은 폴더 내에 위치시킨다.
여러가지 copy들을 유지하게 되서 결국은 유지보수에 문제가 발생.
=> package라는 논리적인 단위로 관련있는 클래스들을 묶어서 사용하자. package는 논리적인 단위. 물리적으로는 folder로 표현하자!

* Acess Modifier: 접근 제어자
1. public: 제약없이 사용 가능.(package에 상관없이) class가 public이라고 class 내의 모든 것들을 가져다 막 사용할 수 있는 거는 아니다. class 안에 있는 것들은 개별적으로 접근 제어자를 가진다.
2. protected: 상속 배운 다음에 배울 예정.
3. package(default): 키워드를 안쓰는 경우. 같은 패키지 내에서만 사용 가능.
4. private: 같은 class 안에서만 사용 가능. 같은 클래스 외부에서는 직접적인 access가 불가하기 때문에 데이터를 보호할 수 있다. (정보 은닉, information hiding)
=> 결론적으로 클래스 안의 field는 특별한 이유가 없는 한 데이터 보호를 위해해기본으로 private으로 설정한다. 메서드는 기능을 하기 때문에 외부에서 사용할 수 있도록 기본으로 public으로 설정한다.

* 기본적인 class의 개념
1. private field
2. static field
3. constructor 여러개 (오버로딩)
4. 일반적인 business method는 모두 public 설정
5. private field에 대한 getter와 setter method
6. main method (optional)
