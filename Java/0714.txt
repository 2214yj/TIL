# 0714

* 예외 처리
    - compile time error : 코드 자체를 잘못 작성한 것.
    - runtime error : Error -> 프로그램이 해결할 수 없는 오류
                    Exception -> 해결 가능한 오류

프로그램을 실행하다가 프로그램이 정상적인 수행이 안되면 (Exception이 발생될 수 있는 상황에 처하면) JVM이 지금 발생한 Exception에 대한 정보를 모아서 Exception class의 인스턴스를 생성한다.
이 객체를 우리가 프로그램적으로 처리를 해줘야 한다. 만약에 Exception 발생에 대한 처리를 안해준다면 프로그램이 강제 종료된다. 반면에, Exception에 대한 처리를 해주면 프로그램이 종료되지 않고 계속적으로 진행될 수 있다.

Exception을 처리하는 방법: try-catch-finally 문을 이용하여 처리하면 된다. catch문에서 하위 exception이 먼저 등장해야 한다.(상위 exception이 먼저 등장할 경우, 하위 exception을 catch할 수 없다.) finally문은 오류의 발생여부와 상관없이 무조건 실행된다.



* Thread
Q. Thread가 무엇인가?
    A. Thread는 execution stack을 별도로 가지고 있는 실행 흐름. 스레드는 독립적인 실행 흐름이기 때문에 stack이 스레드마다 별도로 할당된다. 하나의 프로세스 내에 제한된 스레드 개수가 없으므로 임의로 스레드를 많이 만들 수 있다.
        프로세스: 아주 간단히 말하면 지금 현재 실행 중인 각각의 프로그램. 프로그램을 실행시키기 위해서 OS로부터 리소스를 할당받아야 한다.
                Process =       Resource            +      thread
                           1. code: 프로그램 실행 코드
                           2. global data: 프로그램을 실행하기 위한 글로벌 데이터
                           3. Heap: 동적 배열을 위한 메모리 영역
                           4. Stack: 함수 콜스택을 쌓기 위한 메모리 영역
            프로세스는 최소한 하나 이상의 스레드로 구성된다.
            - thread가 딱 한개 -> Single-thread process
            - thread가 2개 이상 -> Multi-thread process

Q. 스레드가 많을 수록 좋을까?
독립적인 실행 흐름이기 때문에 스레드가 실행되는 스택 영역이 스래드마다 할당된다. 스레그가 많으면 많을 수록 스택을 쪼개서 줘야 하므로 스택 영역이 부족해진다. 효율성의 문제가 발생할 수 있으므로 항상 적정량의 스레드를 실행해야 한다.

* CPU(core)
CPU에서 실제로 일을 할 수 있는 것은 코어. 기술이 점점 발전하면서 여러개의 코어들이 등장. 하나의 코어는 한순간에 하나의 일만 할 수 있다.
Single Core라면 한순간에 하나의 일만 할 수 있는데, 그럼에도 멀티태스킹이 가능하다. How? => 여러 프로그램들이 마치 동시에 실행되는 것처럼 보인다. Time Slicing 기법 (시분할 기법을 이용해서 조금씩 각각의 프로그램들을 실행한다. )  =  "멀티태스킹"
Multi processing: 프로그램 여러 개가 동시에 실행된다. (당연히 core가 여러 개 있어야 가능하다.)
Multi threading: 프로그램 내의 스레드 여러 개가 동시에 실행된다.



* Multi-threading
다중 스레딩이 가지는 장단점이 있다.
    - 장점: 같은 리소스를 공유하며 일하기 때문에 효율적인 처리가 가능하다.
            사용자에 대한 응답성이 높아진다. (interactive한 환경)
    - 단점: 프로그램이 어렵다. (공유 자원에 대한 동기화 처리가 필요하기 때문에, 동기화를 잘못하면 데드락(교착 문제) 발생)
            스레드를 직접적으로 제어하는 데 한계가 있다.

자바는 스레드를 잘 만들어서 사용할 수 있도록 언어 차원에서 지원해준다.
메인 메소드 자체는 스레드가 아니다. JVM이 메인 스레드를 만들어 메인 메소드를 호출하는 형태이다. "스레드 != 메소드" 프로그램의 독립적인 실행 흐름을 스레드라고 하고 스레드에서 메소드를 호출한다.

Q. 자바에서 스레드를 만들어 사용하려면 어떻게 해야 할까요?
    A. 자바에서 새로운 실행 흐름을 나타내는 thread는 인스턴스이다. (thread를 만드는 클래스가 존재한다.)
        1. 자바가 제공해주는 클래스를 이용해서 thread 인스턴스를 만든다. 메인스레드는 JVM에 의해 만들어지지만 나머지 thread들은 직접 만들어야 한다.
        2. 방법 1.이때 원하는 일을 하는 스레드를 만들어내기 위해서는 thread 클래스를 상속하여 user define 클래스를 만들어 사용하면 된다. 그러나 이는 잘 사용되지 않는다. 왜? 자바는 다중 상속을 지원하지 않기 때문에, thread 클래스를 상속 받으면 다른 클래스로부터 상속받을 수 없다. 또한 두 개의 클래스가 tightly coupled되는 문제가 발생해서 재사용하기가 껄끄러워 진다.
        3. 방법 2. Runnable이라는 인터페이스를 구현해서 user define 클래스를 만들고 user define 클래스의 인스턴스를 만든다. 만든 객체를 new Thread()의 인자로 넣는다.
        => 두 방법 모두 Thread class를 이용한다. 방법2가 좀 더 선호된다. 상속관계가 없기 때문에 상속관계로부터 파생되는 문제들로부터 좀 더 자유롭기 때문이다.

main thread stack
start() -> thread 생성 -> stack 할당 -> run() 호출    // 이때 run() 호출이 먼저 될지, start() 이후의 코드가 먼저 실행될지 모른다. 순서가 보장되지 않는다. 왜? start()되면 스레드는 runnable 상태가 되고 스케쥴러에 의해 특정 시점에 실행되게 된다.
ex)
    package java_practice0714;

    class MyThread extends Thread{
        @Override
        public void run() {
            System.out.println("MyThread");
        }

    }

    class MyThread2 implements Runnable{	//thread라고 할 수 없음 thread 클래스로부터 상속을 받지 않았기 때문
        @Override
        public void run() {
            System.out.println("MyThread2");
        }
    }

    public class Main {

        public static void main(String[] args) {

            MyThread t = new MyThread();
            MyThread2 a = new MyThread2();
            t.start();
            Thread t2 = new Thread(a);
            t2.start();

            System.out.println("안녕하세요 !");
        }
    }
=> 출력 결과:
MyThread2
안녕하세요 !
MyThread


ex)

    package java_practice0714;

    class ThreadEx_01_1 extends Thread{

        @Override
        public void run() {
            for (int i = 0; i<5; i++) {
                System.out.println(getName());
            }
        }

    }

    class ThreadEx_01_2 implements Runnable{	// Runnable 인터페이스를 구현한 것이지 Thread 클래스로부터 상속받은 것이 아니기 때문에 스레드가 아니다.

        @Override
        public void run() {
            for (int i = 0; i<5; i++) {
                System.out.println(Thread.currentThread().getName());		// 스레드가 아니기 때문에 현재 실행중인 스레드를 출력하는 static method를 사용하여 스레드 정보를 출력한다.
            }

        }

    }

    public class ThreadExam01 {

        public static void main(String[] args) {
            ThreadEx_01_1 t1 = new ThreadEx_01_1();

            ThreadEx_01_2 r = new ThreadEx_01_2();
            Thread t2 = new Thread(r);

            t1.start();	// t1,t2와 그 아래 출력문 셋 중에 누가 먼저 실행될지 모른다.
            t2.start();

            System.out.println("main thread 종료!");
        }
    }
=> 실행할 때마다 출력 결과가 바뀐다. 매번 출력되는 순서가 바뀜.
main thread 종료!
Thread-1
Thread-0
Thread-1
Thread-1
Thread-1
Thread-1
Thread-0
Thread-0
Thread-0
Thread-0



* 프로세스의 종료
우리가 실행시키는 프로세스는 내부에서 파생된 모든 user define thread가 종료되면 프로그램이 종료된다.


* 코어 1개, 스레드 1개:
    A 작업을 끝내고 B 작업을 처리. context switching을 안하기 때문에 속도가 더 빠르다.
* 코어 1개, 스레드 2개:
    time scheduling을 통해 2개의 스레드를 번갈아가며 처리. context switching이 빈번하게 일어나기 때문에 속도는 더 느리다. 대신 2개가 동시에 처리되는 것과 같은 효과.
=> 멀티코어가 아니면 다중 스레드 효과가 덜하다.(동시에 처리되는 것과 같은 효과 말고는 별다른 효과가 없음.) 하지만 멀티코어라면 동시에 다중 스레들 처리가 가능해지므로 다중 스레드 효과가 크다.

* 스레드 우선순위: 멀티코어 환경에서는 우선순위가 상관이 없으므로 더이상 사용하지 않는다.
t1.setPriority(0);
=> 우선순위를 숫자로 지정 가능. min이 0이고 max가 10이다.  숫자가 높을수록 우선순위가 높다. 그러나 멀티코어 환경에서는 제대로 동작하지 않기 때문에 이제는 사용하지 않는다.

* 스레드의 종류
- Daemon Thread: 일반 스레드에 보조적인 작업을 하기 위해서 사용. 데몬 스레드는 해당 데몬 스레드를 파생시킨 스레드가 종료되면 함께 종료된다. ex) 가비지 컬렉터 -> 프로그램이 종료되면 같이 종료된다.  자동 저장 -> 몇초마다 문서를 저장하는 보조 작업을 하다가 프로그램이 종료될 때 같이 종료된다.
    사용법: t1.setDaemon(true)

* 기억해야 하는 thread의 method
1. sleep(long millisecond) : static 메서드로 현재 수행하는 스레드를 일정 시간 동안 재우라는 의미가 있다. 따라서 sleep() 앞에 어떠한 인스턴스를 붙여도 의미가 똑같다. 따라서, sleep() 메서드를 사용하는 위치가 중요하다.(메인 메서드에서 호출할 경우, 메인 스레드를 재운다)
                            sleep 상태에서 깨는 조건: 1. 지정된 시간이 다 된 경우
                                                  2. 스레드에 대해 interrupt()가 호출되어 interruptedException이 발생한 경우 -> 항상 try ~ catch를 이용해야 한다.

2. interrupt() : 스레드의 강제 중지. 이와 비슷하게 stop()이 있었다. stop()은 잘못 사용할 경우 데드락에 걸리는 문제가 있어서 deprecated 되었다.
                Thread 실행 후 작업(run() 메소드)이 끝나기 전에 해당 스레드를 중지시키고 싶을 때 사용. 직접 중지시키지 않는 대신 스레드가 갖고 있는 내부 상태를 Interrupted state로 변경한다.
                Thread가 interrupt가 되었는지 확인하는 메서드 interrupted()와 isInterrupted()가 있다.
                - interrupted() : interrupted()는 Thread의 static 메서드이기 때문에 현재 수행 중인 스레드가 interrupt되었는지 확인한다. 현재 상태값을 조사하고 그 상태값을 false로 바꾼다.
                - isInterrupted() : isInterrupted()는 인스턴스 메서드이기 때문에 특정 스레드가 interrupt가 걸렸는지 여부를 알 수 있다. 내부 상태를 확인해서 interrupt가 되었는지 확인해서 현재 상태값만 true or false로 리턴해준다.
                자고 있을 때(sleep() 도중에) interrupt()가 걸리면 일어나면서 자기 상태를 false로 초기화한다. 따라서, catch() 문에서 interrupt()를 호출해주면 위와 같은 현상을 방지할 수 있다.
                ex)             try {
                    				Thread.sleep(3000);
                    			}catch(Exception e) {
                    				interrupt();
                    			}

3. yield() : 스레드가 자신에게 주어진 실행시간을 다 쓰지 않고 다음 차례의 스레드에게 양보한다. runnable 상태에 있는 다른 스레드들에게 양보.

4. suspend() & resume() : suspend()는 스레드의 일시 중지. resume()은 일시 중지된 스레드를 다시 시작. 둘 다 deprecated 되었다.
ex) deprecated된 메소드 suspend(), resume(), stop() 오버라이딩하기
package java_practice0714;

class ThreadEx_06 implements Runnable{

	volatile boolean suspended = false;
	volatile boolean stopped = false;

	@Override
	public void run() {
		while(!stopped) {	//stop 되지 않는 이상 계속 돈다.
			if(!suspended) {	//suspend 되지 않았다
				System.out.println(Thread.currentThread().getName());
				try {
					Thread.sleep(1000);
				}catch(Exception e) {

				}
			}

		}
	}


	public void suspend() {
		suspended = true;
	}

	public void stop() {
		stopped = true;
	}

	public void resume() {
		suspended = false;
	}

}

public class ThreadExam06 {

	public static void main(String[] args) {
		ThreadEx_06 r1 = new ThreadEx_06();
		ThreadEx_06 r2 = new ThreadEx_06();
		ThreadEx_06 r3 = new ThreadEx_06();
		Thread t1 = new Thread(r1,"*");	// 두번째 인자는 스레드의 이름
		Thread t2 = new Thread(r2,"**");
		Thread t3 = new Thread(r3,"***");
		t1.start();
		t2.start();
		t3.start();

		try {
			Thread.sleep(4000); 	//main thread를 재운다.
			r1.suspend(); 			//t1을 일시정지시킨다.
			Thread.sleep(4000);
			r2.suspend();
			Thread.sleep(4000);
			r1.resume();
			//처음에는 골고루 찍히다가 2초 후부터 별 하나짜리가 안 찍히고 또다시 2초 후에 별 두개짜리도 안 찍힘. 다시 2초 후에 별 하나짜리가 찍힘
			Thread.sleep(4000);
			r1.stop();
			r2.stop();
			Thread.sleep(4000);
			r3.stop();
		} catch(Exception e) {

		}
	}
}

* volatile => 캐시에서 가져오지 않고 메모리에서 데이터를 가져 온다. 캐시에서 잘못 데이터를 가져오는 문제를 해결해준다.



* 정리
Thread
    - 생성
    - start
    - sleep()
    - stop() [X] -> stop()은 스레드의 강제 종료
    - suspend() [X] -> suspend()는 스레드의 일시 중지
    - resume() [X] -> 일시 중지된 스레드를 다시 시작
    - interrupt(), interrupted(), isInterrupted()
    - yield()

=> 이러한 스레드 메소드들이 어떻게 동작하는지를 이해하고 적재적소에 사용할 수 있어야 한다.

