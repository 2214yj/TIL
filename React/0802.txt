# 0802

** React
리액트는 클라이언트와의 interaction이 많은 경우에 적합.
React는 프레임워크보다는 라이브러리라고 표현하는 것이 맞다.
리액트는 굉장히 다양한 라이브러리들을 제공해준다. 제공되는 많은 라이브러리를 이용해서 UI Rendering을 한다.
리액트는 컴포넌트의 집합이다. 컴포넌트는 리액트 앱을 구성하는 최소한의 단위이다.
컴포넌트화시켜 놓으면 다른 앱에서도 이를 쉽게 사용할 수 있다. 각각의 컴포넌트는 별도의 js 파일로 독립적으로 존재한다.

다음과 같은 두가지 방식으로 컴포넌트를 만들 수 있다.
1. class형 component   =>   과거에 주로 사용했던 방식. 기능이 더 많지만 코드량이 많고 복잡하며 느리다.
2. 함수형 component   =>   클래스에 비해 쉽고 간결하다. React Hooks를 통해 개선되었다. 이로 인해 굳이 클래스형 컴포넌트를 사용할 이유가 없어짐. 이제 거의 대부분 함수형 컴포넌트를 사용한다.


* 프레임워크 vs 라이브러리
프레임워크는 라이브러리를 포함하고 있다. 또한 프레임워크는 실행 흐름에 대한 제어를 한다.


* IOC
프로그램 코드가 제어를 해야 하나 프레임워크에 의해 제어가 역전 당하는 현상


* JQuery에 비해 React, Vue 등이 각광받는 이유가 무엇일까?
JQuery는 쉽게 사용 가능하지만 유지보수가 어렵고 속도가 느리다.
JQuery 자체가 느리기 보다는 사용자 interaction이 많을 수록 느려진다.
JQuery는 DOM을 직접 제어하기 때문에 DOM이 변경될 때마다 repaint된다.
React, Vue 등은 Virtual Dom을 이용해서 속도 문제를 해결했다.



** Node.js
자바스크립트는 원래 웹 브라우저 상에서 실행되는 언어이다.
자바스크립트가 Node.js에 의해 프로그래밍 언어로 각광을 받기 시작했다.
NPM(Node Package Manager, dependency를 관리해준다.)
NPM을 이용해서 리액트 어플리케이션을 만들어주는 모듈이 있다.
결국은 리액트 코드를 작성하기 위해서 여러 가지 모듈들이 필요하고 이를 다운로드하고 관리하기 위해 NPM이 필요하다. (리액트가 노드 위에서 동작하지 않는 점을 주의해야 한다.)


* React APP을 만들어 보아요!
- webpack module : Package module
- babel module : es6를 기본으로 구현, 하지만 아직도 많은 클라이언트들은 구형 브라우저(es6를 지원하지 않는)를 사용하고 있다. es6로 작성한 코드를 구형 브라우저에서도 동작할 수 있도록 transfile 해준다.
=> 과거에는 먼저 설치하고 설정한 후 react APP을 작성했다.
좀더 편리하게 자동화를 위해 "create-react-app" module이 등장했다. 이를 사용하면 편하게 구현을 시작할 수 있다.
"create-react-app"은 package repository에 있다.


npm을 이용해서 모듈을 다운로드 받을 수 있다. 이때 -g 옵션을 주면 공용 공간에 다운로드되어 다른 프로젝트들에서도 사용 가능하다. 'npm install <모듈명> <버전> -g'
npm을 통해 설치해서 사용할 경우, 서버 쪽에서 업데이트되면 우리가 알 수 없다는 문제점이 있다.
=> npm 대신 npx를 사용하자.

npx는 보일러 플레이트(boiler plate, 약간씩 변경되어 자주 재사용되는 코드들을 통칭)
npx는 모듈을 설치하지 않는다. 갖고 와서 실행하고 삭제하는 일회성. 대신에 항상 서버의 최신 버전을 가져오기 때문에 npm의 문제점을 보완 해준다.
'npx create-react-app .' 명령어를 통해 폴더 생성 후 npx를 이용해 react APP을 생성.


* 폴더 구조
- public : index.html이 시작 html이다.
- src : src 밑에 코드를 작성한다. index.js가 jsvascript 시작점이다.
- package.json : 프로젝트에 대한 기본 정보 확인.



* JSX (Javascript Syntax eXtension)
jsx는 javascript 확장 문법.
html과 javascript가 혼합된 형태로 아주 쉽게 원하는 곳에 html 코드를 찍어줄 수 있다.
리액트에서 필수로 사용해야 하는 것은 아니지만 JSX를 사용하면 더 편리하다.
JSX를 이용해서 기본적인 UI를 화면에 표현 가능.
"" 없이 자바스크립트와 HTML을 혼용가능하다.
ex) const str = <H1>Hello world</H1>

* JSX 사용 규칙
    JSX를 이용할 경우 여러 element가 있다면 반드시 하나의 부모 요소로 감싸 줘야 한다.
