# 0720

* 데이터베이스 복습
1. 데이터베이스 (데이트의 집합, 데이터가 모여있는 공간)
2. 데이터를 사용/관리하기 위한 DBMS
3. Table
4. Index
5. View -> select 구조 -> 보안/효율성
6. stored procedure
7. Trigger -> Trigger에 부착. 이벤트 발생 시 추가적인 작업을 자동화
8. backup/restore

* SQL
1. DML(Data Manipulation Language): insert, select, update, delete

2. DDL(Data Definition Language): create, drop, alter

3. DCL(Data Control Language): grant, revoke, commit, deny


* 기본적인 select 문의 구조
select
from
where
group by
having
order by



* Transaction
작업의 최소 단위로 임의로 설정할 수 있다.
여러 SQL 문장을 하나의 논리적인 단위인 Transaction으로 설정 가능!
트랜잭션을 설정하는 이유는 ACID!
트랜잭션의 ACID 특성을 이용하기 위해 트랜잭션을 반드시 걸어서 사용해야 한다!


* ACID
Atomicity(원자성) : All or nothing
Consistency(일관성) : correct state(무결성 조건 등 다양한 제약 조건이 유지되는 상황)가 유지되어야 한다.
Isolation(독립성) : 트랜잭션이 사용하고 있는 데이터를 다른 트랜잭션이 사용할 수 없다. 동기화 처리
Durability(영속성) : 트랜잭션이 정상적으로 종료되면 해당 결과가 2차 저장소에 영구적으로 저장된다.

"이체라는 작업"
A라는 계좌에서 잔액이 존재하는지 select
A계좌 잔액이 update
B계좌 select
B계좌 잔액이



* MySQL의 데이터 타입
MySQL은 약 30개 정도의 다양한 데이터 타입을 가지고 있다. DBMS마다 다른 데이터 타입을 가지고 있다.
1. 숫자
    1. INT (4 byte -> -21억 ~ +21억)
    2. BIGINT (8 byte -> -900경 ~ +900경)
    3. FLOAT (4 byte) : 소수점 표현, 명확한 진짜 실수가 아닌 근사값으로 저장하기 때문에 소수점 오타가 발생할 수 있다.
    4. DOUBLE (8 byte) : 소수점 표현, 명확한 진짜 실수가 아닌 근사값으로 저장하기 때문에 소수점 오타가 발생할 수 있다.
        => 따라서 명확한 소수를 표현하기 위해서는 DECIMAL을 주로 사용한다.
    5. DECIMAL : 실수값을 명확하게 전체 자리수와 소수점 자리수를 지정하여 표현 가능.
2. 문자
    1. CHAR : 고정 길이(1~255)가 정해져 있다. 사이즈를 너무 크게 잡으면 낭비되는 공간이 많아진다. 공간 낭비가 심하지만 VARCHAR에 비해 빠르게 연산 가능.
    2. VARCHAR : 가변 길이(1~65535).
    3. LONGTEXT : 긴 텍스트를 저장할 수 있다. 최대 4GB까지 저장 가능! ex) 대본, 책 전체를 저장할 때 사용한다.
    4. LONGBLOB


* MySQL의 내장 함수
    1. 문자열 함수
        CHAR_LENGTH : 글자수를 셀 때 사용.
        LENGTH : 바이트 길이를 계산.
        CONCAT : 문자열 연결.
        CONCAT_WS : 구분자를 지정하여 문자열 연결.
        FORMAT : 소수점 자리를 지정해줄 수 있고 세자리마다 ,를 찍을 수 있다.
        TRIM : 좌우의 여백을 제거해준다.
        REPLACE : 문자열 중 특정 문자열을 바꾼다.
        SUBSTRING : 문자열에 인덱스를 지정하여 서브 스트링을 추출한다. DBMS에서는 1부터 인덱스를 가진다!
    2. 날짜에 관련된 내장 함수
        CURDATE : 현재 날짜
        NOW : 현재 날짜와 시간
        YEAR : 날짜 중에서 year만 추출

대용량의 데이터 처리를 위한 LONGTEXT와 LONGBLOB에 대해 간단하게 알아보자!


* CLOB와 BLOB
여기서 LOB는 Large Object의 약자이다. 어느 언어에서나 통용되는 일반적인 용어.
BLOB은 Binary Large Object.
CLOB는 Character Large Object.


* JOIN
필요한 데이터를 가져오기 위해서 조인은 필수이다. 하지만 조인은 속도가 느리기 때문에 가능한 한 조인을 하지 않는 것이 좋다.

- Inner JOIN
일반적으로 join은 inner join을 지칭한다.

- Outer JOIN
조인 조건을 만족하지 않는 행도 포함시킨다.
    - LEFT OUTER JOIN : 왼쪽 테이블의 조인 조건을 만족하지 않는 행도 포함시킨다.
    - RIGHT OUTER JOIN : 오른쪽 테이블의 조인 조건을 만족하지 않는 행도 포함시킨다.
    - FULL OUTER JOIN : 양쪽 테이브르이 조인 조건을 만족하지 않는 행도 포함시킨다.

- Self JOIN

- Cross JOIN
너무 오래 걸리는 더미 연산을 하기 때문에 오래 걸린다. 그래서 잘 안쓴다.

ex) mysql 전체 실습 예제
-- 집계 함수 ( SUM(), COUNT(), COUNT(DISTINCT), MAX(), MIN(), AVG() )

-- 전체 구매자가 구매한 물품 개수의 평균은 얼마일까요?
SELECT
    AVG(amount)
FROM
    buytbl;


-- 각 사용자별로 한번 구매시 물건을 평균 몇 개 구매했는지 조회하세요!
select userID, AVG(amount) as '평균 구매 개수' from buytbl group by userId;

-- 가장 큰 키와 가장 작은 키의 회원 이름과 키를 출력하세요!!
-- Query 구현이 어려우면 서브 쿼리로 생각을 전환하자!
SELECT
    name, height
FROM
    usertbl
WHERE
    height = (SELECT
            MIN(height)
        FROM
            usertbl)
        OR height = (SELECT
            MAX(height)
        FROM
            usertbl);


-- 사용자별 총 구매금액이 1,000 이상인 사용자만 출력하세요!
-- Having은 그룹에 대한 조건절!
SELECT
    userId, SUM(price * amount)
FROM
    buytbl
GROUP BY userId
HAVING SUM(price * amount) >= 1000;


-- 트랜잭션 실습
use sqldb;
select distinct userid from buytbl;
-- 트랜잭션 시작문
start transaction;

delete
from buytbl;

-- 실제 데이터베이스(2차 저장소)에 저장하라
commit;

-- start transaction 이후로 실행시킨 내용을 모두 취소해라.
rollback;


create table testtbl1(
	id			INT,
    userName	CHAR(3),
    age			INT
);

-- 가장 일반적은 Insert 구문
INSERT INTO testtbl1 VALUES(1, '홍길동', 25);

-- 필요한 것만 선택해서 데이터 입력
INSERT INTO testtbl1(id, userName) VALUES(2,'이순신');


-- auto_increment : 숫자 형식만 가능. 반드시 primary key이거나 unique 속성이 잡혀 있어야 설정 가능하다.
create table testtbl2(
	id			INT auto_increment primary key,
    userName	CHAR(3),
    age			INT
);

INSERT INTO testtbl2 VALUES(NULL, '홍길동', 25);
INSERT INTO testtbl2 VALUES(NULL, '김길동', 30);

ALTER TABLE testtbl2 auto_increment = 100;
INSERT INTO testtbl2 VALUES(NULL, '최길동',50);

-- @@으로 시작하는 것은 mysql의 환경 변수이다.
SET @@auto_increment_increment = 5;
INSERT INTO testtbl2 VALUES(NULL, '박길동', 60);


create table testtbl3(
	id		INT,
    fname	VARCHAR(50),
    lname	VARCHAR(50)
);

insert into testtbl3
	select emp_no, first_name, last_name
	from employees,employees;

start transaction;

-- UPDATE 구문
update testtbl3
set lname = '없음'
where fname = 'Kyoichi';

rollback;


-- DELETE 구문, limit을 사용해서 mysql에서는 상위 n개를 지정해서 삭제 가능하다.
delete
from testtbl3
where fname = 'kyoichi'
limit 100;



-- MySQL이 제공하는 문자열 함수
SELECT CHAR_LENGTH('abcde'),
		CHAR_LENGTH('홍길동'),
        LENGTH('abcde'),
        LENGTH('홍길동');

SELECT CONCAT('소리없는', '아우성'),
	CONCAT_WS('-','2022','02','20');

SELECT FORMAT(123456.1415234,3);

SELECT TRIM('    소리 없는 아우성      '),
	REPLACE('이것은 소리없는 아우성', '소리','양심'),
    SUBSTRING('이것은 소리없는 아우성',3,5);

-- 날짜에 관련된 내장 함수
select CURDATE(),
	NOW(),
    YEAR(curdate());


create database movieDB;

use movieDB;

create table movieTBL (
	movie_id		INT,
    movie_title		VARCHAR(30),
    movie_script	LONGTEXT,
    movie_film		LONGBLOB
) DEFAULT CHARSET=utf8mb4;

-- 데이터를 입력!
insert into movieTBL values(1,'쉰들러 리스트',
	load_file('/Users/kim-yeji/Downloads/sql/Schindler.txt'),
    load_file('/Users/kim-yeji/Downloads/sql/Schindler.mp4')
    );

-- 안들어간 이유 정해진 크기 이상으로 로드할 수 없다. 환경설정이 안되었기 때문에 정상적으로 동작하지 않아요! ---


select movie_film
from movieTBL
where movie_id=1;



-- join 실습
use sqldb;
-- 구매 테이블에서 'JYP'라는 아이디를 가진 사람이 구매한 물건을 발송하기 위해서 이름과 주소가 필요하다. 이 정보는 usertbl에 존재한다.

-- 표준 방식
select buytbl.userId, name, addr
from buyTBL B
	inner join userTBL U
    ON B.userId = U.userId
where B.userId = 'JYP';
-- where 절로 조건을 줘서도 동일한 결과를 낼 수 있지만 표준 방식을 따르는 것이 좋다.


use sqldb;

-- 학생 테이블 생성
create table stdtbl(
	std_name	VARCHAR(10)	NOT NULL PRIMARY KEY,
    std_addr	VARCHAR(4)	NOT NULL
);

-- 동아리 테이블 생성
create table clubTbl(
	club_name	VARCHAR(10) NOT NULL PRIMARY KEY,
    club_room	VARCHAR(4)	NOT NULL
);

-- 학생 동아리 테이블 생성
create table stdclubtbl(
	num			INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    std_name	VARCHAR(10)	NOT NULL,
    club_name	VARCHAR(10) NOT NULL,
    FOREIGN KEY(std_name) REFERENCES stdtbl(std_name),
    FOREIGN KEY(club_name) REFERENCES clubtbl(club_name)
);


insert into stdtbl values('김범수','경남');
insert into stdtbl values('성시경','서울');
insert into stdtbl values('조용필','경기');
insert into stdtbl values('은지원','경북');
insert into stdtbl values('바비킴','서울');

insert into clubtbl values('수영','101호');
insert into clubtbl values('바둑','102호');
insert into clubtbl values('축구','103호');
insert into clubtbl values('봉사','104호');

insert into stdclubtbl values(NULL, '김범수','바둑');
insert into stdclubtbl values(NULL, '김범수','바둑');
insert into stdclubtbl values(NULL, '조용필','축구');
insert into stdclubtbl values(NULL, '은지원','축구');
insert into stdclubtbl values(NULL, '은지원','축구');
insert into stdclubtbl values(NULL, '바비킴','봉사');

-- 학생을 기준으로 학생이름, 지역, 가입한 동아리, 동아리 방 번호를 출력하세요!
-- 내 sql문
select s.std_name, s.std_addr, c.club_name, c.club_room
from stdclubtbl sc
	inner join stdtbl s
    on sc.std_name = s.std_name
    inner join clubtbl c
    on sc.club_name = c.club_name;

-- 정답
select s.std_name, s.std_addr, sc.club_name, c.club_room
from stdtbl s
	inner join stdclubtbl sc
    on s.std_name = sc.std_name
    inner join clubtbl c
    on sc.club_name = c.club_name
order by s.std_name;


-- outer join
-- 전체 회원의 구매 기록을 조회해라. 단, 구매 기록이 없는 회원도 추력되어야 한다.
select usertbl.userId, usertbl.name, buytbl.prodname, usertbl.addr
from usertbl
	left outer join buytbl
    on usertbl.userId = buytbl.userId
order by usertbl.userId;


-- 한번도 구매한 적이 없는 회원의 목록을 출력하세요!
select usertbl.userId, usertbl.name, buytbl.prodname, usertbl.addr
from usertbl
	left outer join buytbl
    on usertbl.userId = buytbl.userId
where buytbl.prodName IS NULL
order by usertbl.userId;
