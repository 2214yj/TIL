# 0719

** 데이터베이스
데이터베이스: 데이터의 집합. 관련 있는 데이터를 체계적으로 구성해 놓은 것.
데이터베이스가 하나 존재하면 그에 대해 여러가지 관리가 필요.
=> 동시성 문제 해결 필요, 데이터 처리, 여러 개의 데이터베이스 관리. => DBMS(Database Management System)
대표적으로 MySQL, MariaDB, Oracle(상용 시장 점유율 1등), DB2(메인 프레임 시장 1등), SQL Server, Postgresql


* DBMS 특징
1. Integrity(무결성)을 보장 해야 한다. 데이터의 오류가 있어서는 안된다.
    데이터베이스 나름대로 constraint(제약조건)을 보장시켜 준다.
2. 데이터의 독립성
    데이터베이스의 크기, 위치들을 변경해도 기존에 사용하고 있는 소프트웨어는 영향을 받지 않아야 한다.
3. 보안
4. 중복
    가능한 중복을 최소화 시켜야 한다. (왜? 중복이 잦으면 무결성의 문제가 생길 위험이 커지고 성능 저하가 발생할 수 있다.)
5. 안전성(backup/restore)
    안전하게 오류없이 데이터를 저장하기 위해 백업과 restore 기능을 제공한다.


* DBMS의 종류
1. 계층형 데이터베이스
2. 네트워크 데이터베이스 (계층형 데이터베이스의 단점을 해결하고자 함. 그러나 이론상과는 달리 구현이 안되는 문제가 있었음)
3. IBM(E.F.codd) 논문을 기반으로 데이터베이스를 만들음. => 관계형 데이터베이스
4. OO 데이터베이스 (관계형 데이터베이스가 이미 현실을 표현하기에 충분했기 때문에 객체 데이터베이스는 잘 사용하지 않음)
5. 객체-관계형 데이터베이스 (대표적으로 Oracle이 있다.)



* MySQL
여러 개의 데이터베이스들이 존재. 각각의 데이터베이스 안에 여러 개의 테이블들이 존재.
각각의 테이블은 열(column)과 행(row)로 이루어져 있다.
primary key를 지정할 수 있다. (왜 primary key가 필요할까? primary key가 설정되어 있으면 해당 인덱스를 통해 빠르게 검색이 가능하기 때문이다.)
primary key는 1개 이하로만 지정 가능. key 여러개를 primary key로 지정 가능.(복합키)

- 테이블: 데이터를 저장하기 위해서 표 형태로 표현한 것. 다른 말로는 relation이라고 표현 가능.
- Primary Key: 각각의 row를 unique하게 식별할 수 있도록 하는 column의 집합.
- 스키마: 데이터베이스 안에서 데이터의 구조, 데이터의 표현 방법, 데이터의 타입, 데이터의 관계 등을 특정한 형식 언어를 이용해서 정의한 구조를 지칭한다.
    보는 관점에 따라 3가지로 구분.
        - external schema: 개발자, 사용자 입장에서 데이터베이스를 바라본 모습
        - conceptual schema: 데이터의 논리적인 구조를 명시해 놓은 것
        - internal schema: 물리적으로 어떻게 저장되는지, 어떤 형태로 저장되는지를 명시해 놓은 것.
    mysql과 mariaDB에서는 스키마라는 용어를 데이터베이스와 동일시한다. (원래 동일하지 않음)
    데이터베이스는 명령어, 식별자 등에 대해 대소문자를 구분하지 않는다.(내부적으로는 소문자로 처리된다.)

Q. char과 varchar의 차이는?
=> char(10)은 메모리 상에 고정으로 10자리를 잡는다. varchar(10)은 가변적으로 최대 10자리를 잡기 때문에 낭비를 줄일 수 있다. (varchar(10)의 경우 만약 3자리만 사용될 경우 메모리 상에 3자리만 사용됨)
대신 고정 문자열 char()을 사용할 경우 연산이 훨씬 빠르다. 특히 insert, delete에서 빠르다.


* 데이터베이스 실습 내용
데이터베이스 생성, 테이블 생성, 데이터 입력, use 데이터베이스명


* 인덱스
인덱스에 따라 성능 차이가 난다. 특히 데이터량이 많을 수록 성능 차가 크다.
인덱스를 쉽게 사용하는 방법은 primary key를 설정하는 것이다.
primary key를 설정하면 column index가 설정된다.


* 뷰
가상의 테이블. 진짜 테이블에 링크된 구조.
실제로 데이터를 가지고 있지 않다. 그렇기 때문에 수정, 삭제와 같은 작업은 실제 테이블에서 수행하며 view를 통해 select 문을 주로 사용한다.
그렇다면 왜 사용할까? 테이블에는 진짜 데이터가 들어있기 때문에 데이터가 오염될 위험성이 있다. 따라서, 테이블을 직접적으로 노출시키지 않는다. (Integrity를 위해서, 데이터를 보호하기 위해서) 또한 보안을 위해서 (개인 신상과 같은 공개되어서는 안되는 데이터들을 보호하기 위해서)
                    테이블을 여러개 조인해서 사용하기보다 미리 뷰로 만들어서 제공하는 것이 더 편리. 개발적 측면이나 사용적 측면에서 뷰를 사용하면 다양한 이점을 갖는다.


* stored procedure(저장된 함수, 내장된 함수)
데이터베이스마다 stored procedure를 작성하기 위한 프로그램 언어가 별도로 존재한다.
각 데이터베이스의 설계자들은 함수를 만들어서 뷰처럼 함수만 제공해준다. 사용자들은 stored procedure를 이용해서 편리하게 사용 가능.
즉, 설계자들이 함수 interface를 제공. 설계자들이 만든 함수 interface가 성능 면에서 더 뛰어나기 때문에 우리가 procedure를 직접 만들어서 사용하는 경우는 거의 없다. (보통 계정 권한에 따라 procedure 생성 권한이 제한된다.)

ex) proceudre 생성 예시 (그러나 우리가 직접 만들어 사용하는 경우는 거의 없다.)
DELIMITER //
CREATE procedure myFunc()
BEGIN
	SELECT * FROM memberTBL WHERE memberName = '아이유';
    SELECT * FROM productTBL WHERE productName = '냉장고';
END	//

DELIMITER ;

CALL myFunc();
-- DELIMITER를 잠시 //으로 설정해서 ;로 문장이 구분되지 않도록 한다. 사용 후에는 DELIMITER를 다시 ;으로 바꿔줘야 한다. --



* Trigger
트리거를 테이블에 부착 시키면 테이블에 대해 create, insert, delete, update가 발생했을 때(특정 작업이 발생했을 때) 자동으로 특정 작업을 반복한다.
ex) 회원 테이블에서 회원 정보를 삭제해야 하는 경우, Flag 처리만 하고 실제로 데이터를 삭제하지 않는다.(해당 사용자에 대해 update 처리가 발생) 이를 트리거를 통해 자동으로 처리한다면 편리하다.

ex)
DELIMITER //
CREATE TRIGGER trg_deleteMemberTBL
	AFTER DELETE
	ON memberTBL
	FOR EACH ROW
BEGIN
	INSERT INTO  deleteMemberTBL VALUES(
    OLD.memberId, OLD.memberName, OLD.memberAddress, current_date());
END	//


어떤 DBMS이던지 데이터베이스와 데이터베이스 내부의 내용(table, view, stored procedure, index, trigger)을 공부해서 응용해보자!



* MySQL workbench의 Utility(유용한 기능들)
1. SQL 구문 자동 생성
2. Query editor 설정
    1. 예약어 대문자로 변경 (Edit -> Format -> UPCASE keywords
    2. 자동완성 (ctrl + space)
    3. 주석 처리는 블럭을 잡고 ctrl + /
    4. beautiful query (ctrl + b, sql 문을 표준 형태로 정렬해준다.)
3. 사용자 생성과 권한 관리
    사용자에게 role과 privilege를 부여하여 사용 가능.



** SQL
* select ~ from ~ where 조건 group by 그룹 조건 Having 그룹에 대한 조건 order by

ex) select문 테스트
use sqldb;

SELECT
    *
FROM
    usertbl;
SELECT
    *
FROM
    buytbl;

-- 이름이 기명호인 사람을 usertbl에서 추출하려고 합니다.
SELECT
    *
FROM
    usertbl
WHERE
    name = '김경호'세요!
select userId,name from usertbl where height = 182 and birthYear > 1970;

-- 지역이 경남, 전남, 경북인 사람을 조회하세요!
select * from usertbl where addr = "전남" or addr = "경남" or addr = "경북";
select * from usertbl where addr in ("경남","전남","경북");

-- 성이 김씨인 사람들의 이름과 키를 조사하세요!alter
select name, height from usertbl where name like "김%";
-- %는 0개 이상의 글자를 지칭하고 _은 한 글자를 지칭한다.


-- 김경호보다 키가 크거나 같은 사람의 이름과 키를 조회하세요!
SELECT
    name, height
FROM
    usertbl
WHERE
    height >= (SELECT
            height
        FROM
            usertbl
        WHERE
            name = '김경호'
        LIMIT 1);

-- 지역이 '경남'인 사람의 키보다 키가 크거나 같은 사람을 조회하세요!alter
select * from usertbl where height >= (select max(height) from usertbl where addr = "경남");

select name, height from usertbl where height > any(select height from usertbl where addr = "경남");


-- 먼저 가입한 순으로 출력하세요!
select name, mDate
from usertbl
order by mDate;


-- 먼저 가입한 순으로 출력하세요!
select distinct addr
from usertbl;

-- 먼저 가입한 순으로 4명만 출력하세요!
select name, mDate
from usertbl
order by mDate limit 1,3;
-- limit a,b는 순서 중 a~b번 째를 의미한다.


-- 테이블을 복사하는 전형적인 방법, 제약 조건은 복사가 되지 않는다. 추출된 데이터만 복사된다.
create table buytbl2(
	select * from buytbl
);


-- 구매 테이블에서 사용자가 구매한 물품의 개수를 출력하세요!
select userId,SUM(amount) from buytbl group by userId;



-- 구매 테이블에서 각 사용자별 구매액의 총합을 출력하세요!
select userId,SUM(price * amount) from buytbl group by userId;
